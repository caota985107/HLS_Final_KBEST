// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_QRD_Pipeline_LOOP_02_VITIS_LOOP_251_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        R_address0,
        R_ce0,
        R_we0,
        R_d0,
        p_0_0_03279800_lcssa982_reload,
        conv_i_i_i2390896_lcssa1046_reload,
        p_0_0_03279797_lcssa980_reload,
        conv_i_i_i2390893_lcssa1044_reload,
        p_0_0_03279794_lcssa978_reload,
        conv_i_i_i2390890_lcssa1042_reload,
        p_0_0_03279803_lcssa984_reload,
        conv_i_i_i2390899_lcssa1048_reload,
        p_0_0_03278848_lcssa1014_reload,
        p_0_0_03279944_lcssa1078_reload,
        p_0_0_03278845_lcssa1012_reload,
        p_0_0_03279941_lcssa1076_reload,
        p_0_0_03278842_lcssa1010_reload,
        p_0_0_03279938_lcssa1074_reload,
        p_0_0_03278851_lcssa1016_reload,
        p_0_0_03279947_lcssa1080_reload,
        p_0_0_03279787_lcssa974_reload,
        conv_i_i_i2390883_lcssa1038_reload,
        p_0_0_03279784_lcssa972_reload,
        conv_i_i_i2390880_lcssa1036_reload,
        p_0_0_03279781_lcssa970_reload,
        conv_i_i_i2390877_lcssa1034_reload,
        p_0_0_03279790_lcssa976_reload,
        conv_i_i_i2390886_lcssa1040_reload,
        p_0_0_03278835_lcssa1006_reload,
        p_0_0_03279931_lcssa1070_reload,
        p_0_0_03278832_lcssa1004_reload,
        p_0_0_03279928_lcssa1068_reload,
        p_0_0_03278829_lcssa1002_reload,
        p_0_0_03279925_lcssa1066_reload,
        p_0_0_03278838_lcssa1008_reload,
        p_0_0_03279934_lcssa1072_reload,
        p_0_0_03279775_lcssa966_reload,
        conv_i_i_i2390871_lcssa1030_reload,
        p_0_0_03279772_lcssa964_reload,
        conv_i_i_i2390868_lcssa1028_reload,
        p_0_0_03279769_lcssa962_reload,
        conv_i_i_i2390865_lcssa1026_reload,
        p_0_0_03279778_lcssa968_reload,
        conv_i_i_i2390874_lcssa1032_reload,
        p_0_0_03278823_lcssa998_reload,
        p_0_0_03279919_lcssa1062_reload,
        p_0_0_03278820_lcssa996_reload,
        p_0_0_03279916_lcssa1060_reload,
        p_0_0_03278817_lcssa994_reload,
        p_0_0_03279913_lcssa1058_reload,
        p_0_0_03278826_lcssa1000_reload,
        p_0_0_03279922_lcssa1064_reload,
        p_0_0_03279811_lcssa990_reload,
        conv_i_i_i2390907_lcssa1054_reload,
        p_0_0_03279808_lcssa988_reload,
        conv_i_i_i2390904_lcssa1052_reload,
        p_0_0_03279805_lcssa986_reload,
        conv_i_i_i2390901_lcssa1050_reload,
        p_0_0_03279814_lcssa992_reload,
        conv_i_i_i2390910_lcssa1056_reload,
        p_0_0_03278859_lcssa1022_reload,
        p_0_0_03279955_lcssa1086_reload,
        p_0_0_03278856_lcssa1020_reload,
        p_0_0_03279952_lcssa1084_reload,
        p_0_0_03278853_lcssa1018_reload,
        p_0_0_03279949_lcssa1082_reload,
        p_0_0_03278862_lcssa1024_reload,
        p_0_0_03279958_lcssa1088_reload
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] R_address0;
output   R_ce0;
output   R_we0;
output  [15:0] R_d0;
input  [15:0] p_0_0_03279800_lcssa982_reload;
input  [15:0] conv_i_i_i2390896_lcssa1046_reload;
input  [15:0] p_0_0_03279797_lcssa980_reload;
input  [15:0] conv_i_i_i2390893_lcssa1044_reload;
input  [15:0] p_0_0_03279794_lcssa978_reload;
input  [15:0] conv_i_i_i2390890_lcssa1042_reload;
input  [15:0] p_0_0_03279803_lcssa984_reload;
input  [15:0] conv_i_i_i2390899_lcssa1048_reload;
input  [15:0] p_0_0_03278848_lcssa1014_reload;
input  [15:0] p_0_0_03279944_lcssa1078_reload;
input  [15:0] p_0_0_03278845_lcssa1012_reload;
input  [15:0] p_0_0_03279941_lcssa1076_reload;
input  [15:0] p_0_0_03278842_lcssa1010_reload;
input  [15:0] p_0_0_03279938_lcssa1074_reload;
input  [15:0] p_0_0_03278851_lcssa1016_reload;
input  [15:0] p_0_0_03279947_lcssa1080_reload;
input  [15:0] p_0_0_03279787_lcssa974_reload;
input  [15:0] conv_i_i_i2390883_lcssa1038_reload;
input  [15:0] p_0_0_03279784_lcssa972_reload;
input  [15:0] conv_i_i_i2390880_lcssa1036_reload;
input  [15:0] p_0_0_03279781_lcssa970_reload;
input  [15:0] conv_i_i_i2390877_lcssa1034_reload;
input  [15:0] p_0_0_03279790_lcssa976_reload;
input  [15:0] conv_i_i_i2390886_lcssa1040_reload;
input  [15:0] p_0_0_03278835_lcssa1006_reload;
input  [15:0] p_0_0_03279931_lcssa1070_reload;
input  [15:0] p_0_0_03278832_lcssa1004_reload;
input  [15:0] p_0_0_03279928_lcssa1068_reload;
input  [15:0] p_0_0_03278829_lcssa1002_reload;
input  [15:0] p_0_0_03279925_lcssa1066_reload;
input  [15:0] p_0_0_03278838_lcssa1008_reload;
input  [15:0] p_0_0_03279934_lcssa1072_reload;
input  [15:0] p_0_0_03279775_lcssa966_reload;
input  [15:0] conv_i_i_i2390871_lcssa1030_reload;
input  [15:0] p_0_0_03279772_lcssa964_reload;
input  [15:0] conv_i_i_i2390868_lcssa1028_reload;
input  [15:0] p_0_0_03279769_lcssa962_reload;
input  [15:0] conv_i_i_i2390865_lcssa1026_reload;
input  [15:0] p_0_0_03279778_lcssa968_reload;
input  [15:0] conv_i_i_i2390874_lcssa1032_reload;
input  [15:0] p_0_0_03278823_lcssa998_reload;
input  [15:0] p_0_0_03279919_lcssa1062_reload;
input  [15:0] p_0_0_03278820_lcssa996_reload;
input  [15:0] p_0_0_03279916_lcssa1060_reload;
input  [15:0] p_0_0_03278817_lcssa994_reload;
input  [15:0] p_0_0_03279913_lcssa1058_reload;
input  [15:0] p_0_0_03278826_lcssa1000_reload;
input  [15:0] p_0_0_03279922_lcssa1064_reload;
input  [15:0] p_0_0_03279811_lcssa990_reload;
input  [15:0] conv_i_i_i2390907_lcssa1054_reload;
input  [15:0] p_0_0_03279808_lcssa988_reload;
input  [15:0] conv_i_i_i2390904_lcssa1052_reload;
input  [15:0] p_0_0_03279805_lcssa986_reload;
input  [15:0] conv_i_i_i2390901_lcssa1050_reload;
input  [15:0] p_0_0_03279814_lcssa992_reload;
input  [15:0] conv_i_i_i2390910_lcssa1056_reload;
input  [15:0] p_0_0_03278859_lcssa1022_reload;
input  [15:0] p_0_0_03279955_lcssa1086_reload;
input  [15:0] p_0_0_03278856_lcssa1020_reload;
input  [15:0] p_0_0_03279952_lcssa1084_reload;
input  [15:0] p_0_0_03278853_lcssa1018_reload;
input  [15:0] p_0_0_03279949_lcssa1082_reload;
input  [15:0] p_0_0_03278862_lcssa1024_reload;
input  [15:0] p_0_0_03279958_lcssa1088_reload;

reg ap_idle;
reg R_ce0;
reg R_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln250_fu_599_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln252_1_fu_667_p1;
reg   [3:0] j_fu_172;
wire   [3:0] add_ln251_fu_871_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_176;
wire   [3:0] select_ln250_1_fu_637_p3;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [6:0] indvar_flatten_fu_180;
wire   [6:0] add_ln250_1_fu_605_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [15:0] tmp_16_fu_848_p10;
wire   [0:0] icmp_ln251_fu_623_p2;
wire   [3:0] add_ln250_fu_617_p2;
wire   [2:0] trunc_ln252_fu_645_p1;
wire   [3:0] select_ln250_fu_629_p3;
wire   [5:0] tmp_60_cast_fu_649_p3;
wire   [5:0] zext_ln252_fu_657_p1;
wire   [5:0] add_ln252_fu_661_p2;
wire   [15:0] tmp_8_fu_672_p10;
wire   [15:0] tmp_9_fu_694_p10;
wire   [15:0] tmp_10_fu_716_p10;
wire   [15:0] tmp_11_fu_738_p10;
wire   [15:0] tmp_12_fu_760_p10;
wire   [15:0] tmp_13_fu_782_p10;
wire   [15:0] tmp_14_fu_804_p10;
wire   [15:0] tmp_15_fu_826_p10;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U304(
    .din0(p_0_0_03279800_lcssa982_reload),
    .din1(conv_i_i_i2390896_lcssa1046_reload),
    .din2(p_0_0_03279797_lcssa980_reload),
    .din3(conv_i_i_i2390893_lcssa1044_reload),
    .din4(p_0_0_03279794_lcssa978_reload),
    .din5(conv_i_i_i2390890_lcssa1042_reload),
    .din6(p_0_0_03279803_lcssa984_reload),
    .din7(conv_i_i_i2390899_lcssa1048_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_8_fu_672_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U305(
    .din0(p_0_0_03278848_lcssa1014_reload),
    .din1(p_0_0_03279944_lcssa1078_reload),
    .din2(p_0_0_03278845_lcssa1012_reload),
    .din3(p_0_0_03279941_lcssa1076_reload),
    .din4(p_0_0_03278842_lcssa1010_reload),
    .din5(p_0_0_03279938_lcssa1074_reload),
    .din6(p_0_0_03278851_lcssa1016_reload),
    .din7(p_0_0_03279947_lcssa1080_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_9_fu_694_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U306(
    .din0(p_0_0_03279787_lcssa974_reload),
    .din1(conv_i_i_i2390883_lcssa1038_reload),
    .din2(p_0_0_03279784_lcssa972_reload),
    .din3(conv_i_i_i2390880_lcssa1036_reload),
    .din4(p_0_0_03279781_lcssa970_reload),
    .din5(conv_i_i_i2390877_lcssa1034_reload),
    .din6(p_0_0_03279790_lcssa976_reload),
    .din7(conv_i_i_i2390886_lcssa1040_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_10_fu_716_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U307(
    .din0(p_0_0_03278835_lcssa1006_reload),
    .din1(p_0_0_03279931_lcssa1070_reload),
    .din2(p_0_0_03278832_lcssa1004_reload),
    .din3(p_0_0_03279928_lcssa1068_reload),
    .din4(p_0_0_03278829_lcssa1002_reload),
    .din5(p_0_0_03279925_lcssa1066_reload),
    .din6(p_0_0_03278838_lcssa1008_reload),
    .din7(p_0_0_03279934_lcssa1072_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_11_fu_738_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U308(
    .din0(p_0_0_03279775_lcssa966_reload),
    .din1(conv_i_i_i2390871_lcssa1030_reload),
    .din2(p_0_0_03279772_lcssa964_reload),
    .din3(conv_i_i_i2390868_lcssa1028_reload),
    .din4(p_0_0_03279769_lcssa962_reload),
    .din5(conv_i_i_i2390865_lcssa1026_reload),
    .din6(p_0_0_03279778_lcssa968_reload),
    .din7(conv_i_i_i2390874_lcssa1032_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_12_fu_760_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U309(
    .din0(p_0_0_03278823_lcssa998_reload),
    .din1(p_0_0_03279919_lcssa1062_reload),
    .din2(p_0_0_03278820_lcssa996_reload),
    .din3(p_0_0_03279916_lcssa1060_reload),
    .din4(p_0_0_03278817_lcssa994_reload),
    .din5(p_0_0_03279913_lcssa1058_reload),
    .din6(p_0_0_03278826_lcssa1000_reload),
    .din7(p_0_0_03279922_lcssa1064_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_13_fu_782_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U310(
    .din0(p_0_0_03279811_lcssa990_reload),
    .din1(conv_i_i_i2390907_lcssa1054_reload),
    .din2(p_0_0_03279808_lcssa988_reload),
    .din3(conv_i_i_i2390904_lcssa1052_reload),
    .din4(p_0_0_03279805_lcssa986_reload),
    .din5(conv_i_i_i2390901_lcssa1050_reload),
    .din6(p_0_0_03279814_lcssa992_reload),
    .din7(conv_i_i_i2390910_lcssa1056_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_14_fu_804_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U311(
    .din0(p_0_0_03278859_lcssa1022_reload),
    .din1(p_0_0_03279955_lcssa1086_reload),
    .din2(p_0_0_03278856_lcssa1020_reload),
    .din3(p_0_0_03279952_lcssa1084_reload),
    .din4(p_0_0_03278853_lcssa1018_reload),
    .din5(p_0_0_03279949_lcssa1082_reload),
    .din6(p_0_0_03278862_lcssa1024_reload),
    .din7(p_0_0_03279958_lcssa1088_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_15_fu_826_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U312(
    .din0(tmp_8_fu_672_p10),
    .din1(tmp_9_fu_694_p10),
    .din2(tmp_10_fu_716_p10),
    .din3(tmp_11_fu_738_p10),
    .din4(tmp_12_fu_760_p10),
    .din5(tmp_13_fu_782_p10),
    .din6(tmp_14_fu_804_p10),
    .din7(tmp_15_fu_826_p10),
    .din8(select_ln250_1_fu_637_p3),
    .dout(tmp_16_fu_848_p10)
);

TOP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln250_fu_599_p2 == 1'd0)) begin
            i_fu_176 <= select_ln250_1_fu_637_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_176 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln250_fu_599_p2 == 1'd0)) begin
            indvar_flatten_fu_180 <= add_ln250_1_fu_605_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_180 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln250_fu_599_p2 == 1'd0)) begin
            j_fu_172 <= add_ln251_fu_871_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_172 <= 4'd0;
        end
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        R_ce0 = 1'b1;
    end else begin
        R_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln250_fu_599_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        R_we0 = 1'b1;
    end else begin
        R_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln250_fu_599_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_176;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_180;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_172;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign R_address0 = zext_ln252_1_fu_667_p1;

assign R_d0 = tmp_16_fu_848_p10;

assign add_ln250_1_fu_605_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln250_fu_617_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln251_fu_871_p2 = (select_ln250_fu_629_p3 + 4'd1);

assign add_ln252_fu_661_p2 = (tmp_60_cast_fu_649_p3 + zext_ln252_fu_657_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln250_fu_599_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln251_fu_623_p2 = ((ap_sig_allocacmp_j_load == 4'd8) ? 1'b1 : 1'b0);

assign select_ln250_1_fu_637_p3 = ((icmp_ln251_fu_623_p2[0:0] == 1'b1) ? add_ln250_fu_617_p2 : ap_sig_allocacmp_i_load);

assign select_ln250_fu_629_p3 = ((icmp_ln251_fu_623_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign tmp_60_cast_fu_649_p3 = {{trunc_ln252_fu_645_p1}, {3'd0}};

assign trunc_ln252_fu_645_p1 = select_ln250_1_fu_637_p3[2:0];

assign zext_ln252_1_fu_667_p1 = add_ln252_fu_661_p2;

assign zext_ln252_fu_657_p1 = select_ln250_fu_629_p3;

endmodule //TOP_QRD_Pipeline_LOOP_02_VITIS_LOOP_251_6
