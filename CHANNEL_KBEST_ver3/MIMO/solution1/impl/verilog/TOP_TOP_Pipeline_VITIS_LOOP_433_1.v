// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_TOP_Pipeline_VITIS_LOOP_433_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Q_address0,
        Q_ce0,
        Q_q0,
        Q_address1,
        Q_ce1,
        Q_q1,
        Q_address2,
        Q_ce2,
        Q_q2,
        Q_address3,
        Q_ce3,
        Q_q3,
        Q_address4,
        Q_ce4,
        Q_q4,
        Q_address5,
        Q_ce5,
        Q_q5,
        Q_address6,
        Q_ce6,
        Q_q6,
        Q_address7,
        Q_ce7,
        Q_q7,
        sext_ln717,
        sext_ln1245,
        sext_ln1245_1,
        sext_ln1245_2,
        sext_ln1245_3,
        sext_ln1245_4,
        sext_ln1245_5,
        sext_ln1245_6,
        y_hat_V_address0,
        y_hat_V_ce0,
        y_hat_V_we0,
        y_hat_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] Q_address0;
output   Q_ce0;
input  [15:0] Q_q0;
output  [5:0] Q_address1;
output   Q_ce1;
input  [15:0] Q_q1;
output  [5:0] Q_address2;
output   Q_ce2;
input  [15:0] Q_q2;
output  [5:0] Q_address3;
output   Q_ce3;
input  [15:0] Q_q3;
output  [5:0] Q_address4;
output   Q_ce4;
input  [15:0] Q_q4;
output  [5:0] Q_address5;
output   Q_ce5;
input  [15:0] Q_q5;
output  [5:0] Q_address6;
output   Q_ce6;
input  [15:0] Q_q6;
output  [5:0] Q_address7;
output   Q_ce7;
input  [15:0] Q_q7;
input  [15:0] sext_ln717;
input  [15:0] sext_ln1245;
input  [15:0] sext_ln1245_1;
input  [15:0] sext_ln1245_2;
input  [15:0] sext_ln1245_3;
input  [15:0] sext_ln1245_4;
input  [15:0] sext_ln1245_5;
input  [15:0] sext_ln1245_6;
output  [2:0] y_hat_V_address0;
output   y_hat_V_ce0;
output   y_hat_V_we0;
output  [15:0] y_hat_V_d0;

reg ap_idle;
reg Q_ce0;
reg Q_ce1;
reg Q_ce2;
reg Q_ce3;
reg Q_ce4;
reg Q_ce5;
reg Q_ce6;
reg Q_ce7;
reg y_hat_V_ce0;
reg y_hat_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln433_fu_270_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [23:0] sext_ln1245_6_cast_fu_230_p1;
reg  signed [23:0] sext_ln1245_6_cast_reg_586;
wire    ap_block_pp0_stage0_11001;
wire  signed [23:0] sext_ln1245_5_cast_fu_234_p1;
reg  signed [23:0] sext_ln1245_5_cast_reg_591;
wire  signed [23:0] sext_ln1245_4_cast_fu_238_p1;
reg  signed [23:0] sext_ln1245_4_cast_reg_596;
wire  signed [23:0] sext_ln1245_3_cast_fu_242_p1;
reg  signed [23:0] sext_ln1245_3_cast_reg_601;
wire  signed [23:0] sext_ln1245_2_cast_fu_246_p1;
reg  signed [23:0] sext_ln1245_2_cast_reg_606;
wire  signed [23:0] sext_ln1245_1_cast_fu_250_p1;
reg  signed [23:0] sext_ln1245_1_cast_reg_611;
wire  signed [23:0] sext_ln1245_cast_fu_254_p1;
reg  signed [23:0] sext_ln1245_cast_reg_616;
wire  signed [23:0] sext_ln717_cast_fu_258_p1;
reg  signed [23:0] sext_ln717_cast_reg_621;
wire   [63:0] j_1_cast_fu_282_p1;
reg   [63:0] j_1_cast_reg_630;
reg   [63:0] j_1_cast_reg_630_pp0_iter1_reg;
reg   [63:0] j_1_cast_reg_630_pp0_iter2_reg;
reg   [63:0] j_1_cast_reg_630_pp0_iter3_reg;
reg   [63:0] j_1_cast_reg_630_pp0_iter4_reg;
reg   [63:0] j_1_cast_reg_630_pp0_iter5_reg;
reg   [63:0] j_1_cast_reg_630_pp0_iter6_reg;
reg   [63:0] j_1_cast_reg_630_pp0_iter7_reg;
reg   [63:0] j_1_cast_reg_630_pp0_iter8_reg;
reg   [63:0] j_1_cast_reg_630_pp0_iter9_reg;
reg   [63:0] j_1_cast_reg_630_pp0_iter10_reg;
reg  signed [15:0] Q_load_1_reg_680;
reg   [15:0] Q_load_2_reg_685;
reg  signed [15:0] Q_load_2_reg_685_pp0_iter2_reg;
reg   [15:0] Q_load_3_reg_690;
reg   [15:0] Q_load_3_reg_690_pp0_iter2_reg;
reg  signed [15:0] Q_load_3_reg_690_pp0_iter3_reg;
reg   [15:0] Q_load_4_reg_695;
reg   [15:0] Q_load_4_reg_695_pp0_iter2_reg;
reg   [15:0] Q_load_4_reg_695_pp0_iter3_reg;
reg  signed [15:0] Q_load_4_reg_695_pp0_iter4_reg;
reg   [15:0] Q_load_5_reg_700;
reg   [15:0] Q_load_5_reg_700_pp0_iter2_reg;
reg   [15:0] Q_load_5_reg_700_pp0_iter3_reg;
reg   [15:0] Q_load_5_reg_700_pp0_iter4_reg;
reg  signed [15:0] Q_load_5_reg_700_pp0_iter5_reg;
reg   [15:0] Q_load_6_reg_705;
reg   [15:0] Q_load_6_reg_705_pp0_iter2_reg;
reg   [15:0] Q_load_6_reg_705_pp0_iter3_reg;
reg   [15:0] Q_load_6_reg_705_pp0_iter4_reg;
reg   [15:0] Q_load_6_reg_705_pp0_iter5_reg;
reg  signed [15:0] Q_load_6_reg_705_pp0_iter6_reg;
reg   [15:0] Q_load_7_reg_710;
reg   [15:0] Q_load_7_reg_710_pp0_iter2_reg;
reg   [15:0] Q_load_7_reg_710_pp0_iter3_reg;
reg   [15:0] Q_load_7_reg_710_pp0_iter4_reg;
reg   [15:0] Q_load_7_reg_710_pp0_iter5_reg;
reg   [15:0] Q_load_7_reg_710_pp0_iter6_reg;
reg  signed [15:0] Q_load_7_reg_710_pp0_iter7_reg;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1169_1_fu_297_p1;
wire   [63:0] tmp_3_fu_302_p3;
wire   [63:0] zext_ln1169_2_fu_315_p1;
wire   [63:0] tmp_4_fu_320_p3;
wire   [63:0] zext_ln1169_3_fu_335_p1;
wire   [63:0] tmp_5_fu_340_p3;
wire   [63:0] zext_ln1169_4_fu_353_p1;
reg   [3:0] j_fu_68;
wire   [3:0] add_ln433_fu_276_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_1;
wire  signed [3:0] xor_ln1169_fu_291_p2;
wire  signed [4:0] sext_ln1169_fu_311_p1;
wire   [5:0] zext_ln1169_fu_287_p1;
wire   [5:0] add_ln1169_fu_329_p2;
wire  signed [5:0] sext_ln1169_1_fu_349_p1;
wire  signed [23:0] grp_fu_517_p2;
wire   [15:0] tmp_6_fu_373_p4;
wire  signed [23:0] tmp_7_fu_393_p1;
wire   [23:0] grp_fu_523_p3;
wire   [15:0] tmp_7_fu_393_p4;
wire  signed [23:0] tmp_8_fu_413_p1;
wire   [23:0] grp_fu_531_p3;
wire   [15:0] tmp_8_fu_413_p4;
wire  signed [23:0] tmp_9_fu_433_p1;
wire   [23:0] grp_fu_539_p3;
wire   [15:0] tmp_9_fu_433_p4;
wire  signed [23:0] tmp_s_fu_453_p1;
wire   [23:0] grp_fu_547_p3;
wire   [15:0] tmp_s_fu_453_p4;
wire  signed [23:0] tmp_1_fu_473_p1;
wire   [23:0] grp_fu_555_p3;
wire   [15:0] tmp_1_fu_473_p4;
wire  signed [23:0] tmp_2_fu_490_p1;
wire   [23:0] grp_fu_563_p3;
wire   [15:0] tmp_2_fu_490_p4;
wire  signed [23:0] trunc_ln717_7_fu_507_p1;
wire   [23:0] grp_fu_571_p3;
wire  signed [15:0] grp_fu_517_p0;
wire  signed [15:0] grp_fu_523_p0;
wire   [23:0] grp_fu_523_p2;
wire  signed [15:0] grp_fu_531_p0;
wire   [23:0] grp_fu_531_p2;
wire  signed [15:0] grp_fu_539_p0;
wire   [23:0] grp_fu_539_p2;
wire  signed [15:0] grp_fu_547_p0;
wire   [23:0] grp_fu_547_p2;
wire  signed [15:0] grp_fu_555_p0;
wire   [23:0] grp_fu_555_p2;
wire  signed [15:0] grp_fu_563_p0;
wire   [23:0] grp_fu_563_p2;
wire  signed [15:0] grp_fu_571_p0;
wire   [23:0] grp_fu_571_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_done_reg = 1'b0;
end

TOP_mul_mul_16s_16s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
mul_mul_16s_16s_24_4_1_U800(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_517_p0),
    .din1(Q_q7),
    .ce(1'b1),
    .dout(grp_fu_517_p2)
);

TOP_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U801(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_523_p0),
    .din1(Q_load_1_reg_680),
    .din2(grp_fu_523_p2),
    .ce(1'b1),
    .dout(grp_fu_523_p3)
);

TOP_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U802(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_531_p0),
    .din1(Q_load_2_reg_685_pp0_iter2_reg),
    .din2(grp_fu_531_p2),
    .ce(1'b1),
    .dout(grp_fu_531_p3)
);

TOP_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U803(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_539_p0),
    .din1(Q_load_3_reg_690_pp0_iter3_reg),
    .din2(grp_fu_539_p2),
    .ce(1'b1),
    .dout(grp_fu_539_p3)
);

TOP_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U804(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_547_p0),
    .din1(Q_load_4_reg_695_pp0_iter4_reg),
    .din2(grp_fu_547_p2),
    .ce(1'b1),
    .dout(grp_fu_547_p3)
);

TOP_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U805(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_555_p0),
    .din1(Q_load_5_reg_700_pp0_iter5_reg),
    .din2(grp_fu_555_p2),
    .ce(1'b1),
    .dout(grp_fu_555_p3)
);

TOP_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U806(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_563_p0),
    .din1(Q_load_6_reg_705_pp0_iter6_reg),
    .din2(grp_fu_563_p2),
    .ce(1'b1),
    .dout(grp_fu_563_p3)
);

TOP_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U807(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_571_p0),
    .din1(Q_load_7_reg_710_pp0_iter7_reg),
    .din2(grp_fu_571_p2),
    .ce(1'b1),
    .dout(grp_fu_571_p3)
);

TOP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln433_fu_270_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_68 <= add_ln433_fu_276_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_68 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Q_load_1_reg_680 <= Q_q6;
        Q_load_2_reg_685 <= Q_q5;
        Q_load_3_reg_690 <= Q_q4;
        Q_load_4_reg_695 <= Q_q3;
        Q_load_5_reg_700 <= Q_q2;
        Q_load_6_reg_705 <= Q_q1;
        Q_load_7_reg_710 <= Q_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        Q_load_2_reg_685_pp0_iter2_reg <= Q_load_2_reg_685;
        Q_load_3_reg_690_pp0_iter2_reg <= Q_load_3_reg_690;
        Q_load_3_reg_690_pp0_iter3_reg <= Q_load_3_reg_690_pp0_iter2_reg;
        Q_load_4_reg_695_pp0_iter2_reg <= Q_load_4_reg_695;
        Q_load_4_reg_695_pp0_iter3_reg <= Q_load_4_reg_695_pp0_iter2_reg;
        Q_load_4_reg_695_pp0_iter4_reg <= Q_load_4_reg_695_pp0_iter3_reg;
        Q_load_5_reg_700_pp0_iter2_reg <= Q_load_5_reg_700;
        Q_load_5_reg_700_pp0_iter3_reg <= Q_load_5_reg_700_pp0_iter2_reg;
        Q_load_5_reg_700_pp0_iter4_reg <= Q_load_5_reg_700_pp0_iter3_reg;
        Q_load_5_reg_700_pp0_iter5_reg <= Q_load_5_reg_700_pp0_iter4_reg;
        Q_load_6_reg_705_pp0_iter2_reg <= Q_load_6_reg_705;
        Q_load_6_reg_705_pp0_iter3_reg <= Q_load_6_reg_705_pp0_iter2_reg;
        Q_load_6_reg_705_pp0_iter4_reg <= Q_load_6_reg_705_pp0_iter3_reg;
        Q_load_6_reg_705_pp0_iter5_reg <= Q_load_6_reg_705_pp0_iter4_reg;
        Q_load_6_reg_705_pp0_iter6_reg <= Q_load_6_reg_705_pp0_iter5_reg;
        Q_load_7_reg_710_pp0_iter2_reg <= Q_load_7_reg_710;
        Q_load_7_reg_710_pp0_iter3_reg <= Q_load_7_reg_710_pp0_iter2_reg;
        Q_load_7_reg_710_pp0_iter4_reg <= Q_load_7_reg_710_pp0_iter3_reg;
        Q_load_7_reg_710_pp0_iter5_reg <= Q_load_7_reg_710_pp0_iter4_reg;
        Q_load_7_reg_710_pp0_iter6_reg <= Q_load_7_reg_710_pp0_iter5_reg;
        Q_load_7_reg_710_pp0_iter7_reg <= Q_load_7_reg_710_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        j_1_cast_reg_630_pp0_iter10_reg[3 : 0] <= j_1_cast_reg_630_pp0_iter9_reg[3 : 0];
        j_1_cast_reg_630_pp0_iter2_reg[3 : 0] <= j_1_cast_reg_630_pp0_iter1_reg[3 : 0];
        j_1_cast_reg_630_pp0_iter3_reg[3 : 0] <= j_1_cast_reg_630_pp0_iter2_reg[3 : 0];
        j_1_cast_reg_630_pp0_iter4_reg[3 : 0] <= j_1_cast_reg_630_pp0_iter3_reg[3 : 0];
        j_1_cast_reg_630_pp0_iter5_reg[3 : 0] <= j_1_cast_reg_630_pp0_iter4_reg[3 : 0];
        j_1_cast_reg_630_pp0_iter6_reg[3 : 0] <= j_1_cast_reg_630_pp0_iter5_reg[3 : 0];
        j_1_cast_reg_630_pp0_iter7_reg[3 : 0] <= j_1_cast_reg_630_pp0_iter6_reg[3 : 0];
        j_1_cast_reg_630_pp0_iter8_reg[3 : 0] <= j_1_cast_reg_630_pp0_iter7_reg[3 : 0];
        j_1_cast_reg_630_pp0_iter9_reg[3 : 0] <= j_1_cast_reg_630_pp0_iter8_reg[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        j_1_cast_reg_630_pp0_iter1_reg[3 : 0] <= j_1_cast_reg_630[3 : 0];
        sext_ln1245_1_cast_reg_611 <= sext_ln1245_1_cast_fu_250_p1;
        sext_ln1245_2_cast_reg_606 <= sext_ln1245_2_cast_fu_246_p1;
        sext_ln1245_3_cast_reg_601 <= sext_ln1245_3_cast_fu_242_p1;
        sext_ln1245_4_cast_reg_596 <= sext_ln1245_4_cast_fu_238_p1;
        sext_ln1245_5_cast_reg_591 <= sext_ln1245_5_cast_fu_234_p1;
        sext_ln1245_6_cast_reg_586 <= sext_ln1245_6_cast_fu_230_p1;
        sext_ln1245_cast_reg_616 <= sext_ln1245_cast_fu_254_p1;
        sext_ln717_cast_reg_621 <= sext_ln717_cast_fu_258_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln433_fu_270_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_1_cast_reg_630[3 : 0] <= j_1_cast_fu_282_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Q_ce0 = 1'b1;
    end else begin
        Q_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Q_ce1 = 1'b1;
    end else begin
        Q_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Q_ce2 = 1'b1;
    end else begin
        Q_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Q_ce3 = 1'b1;
    end else begin
        Q_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Q_ce4 = 1'b1;
    end else begin
        Q_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Q_ce5 = 1'b1;
    end else begin
        Q_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Q_ce6 = 1'b1;
    end else begin
        Q_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Q_ce7 = 1'b1;
    end else begin
        Q_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln433_fu_270_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        y_hat_V_ce0 = 1'b1;
    end else begin
        y_hat_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        y_hat_V_we0 = 1'b1;
    end else begin
        y_hat_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Q_address0 = zext_ln1169_4_fu_353_p1;

assign Q_address1 = tmp_5_fu_340_p3;

assign Q_address2 = zext_ln1169_3_fu_335_p1;

assign Q_address3 = tmp_4_fu_320_p3;

assign Q_address4 = zext_ln1169_2_fu_315_p1;

assign Q_address5 = tmp_3_fu_302_p3;

assign Q_address6 = zext_ln1169_1_fu_297_p1;

assign Q_address7 = j_1_cast_fu_282_p1;

assign add_ln1169_fu_329_p2 = ($signed(zext_ln1169_fu_287_p1) + $signed(6'd40));

assign add_ln433_fu_276_p2 = (ap_sig_allocacmp_j_1 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_517_p0 = sext_ln717_cast_reg_621;

assign grp_fu_523_p0 = sext_ln1245_cast_reg_616;

assign grp_fu_523_p2 = {{tmp_6_fu_373_p4}, {8'd0}};

assign grp_fu_531_p0 = sext_ln1245_1_cast_reg_611;

assign grp_fu_531_p2 = {{tmp_7_fu_393_p4}, {8'd0}};

assign grp_fu_539_p0 = sext_ln1245_2_cast_reg_606;

assign grp_fu_539_p2 = {{tmp_8_fu_413_p4}, {8'd0}};

assign grp_fu_547_p0 = sext_ln1245_3_cast_reg_601;

assign grp_fu_547_p2 = {{tmp_9_fu_433_p4}, {8'd0}};

assign grp_fu_555_p0 = sext_ln1245_4_cast_reg_596;

assign grp_fu_555_p2 = {{tmp_s_fu_453_p4}, {8'd0}};

assign grp_fu_563_p0 = sext_ln1245_5_cast_reg_591;

assign grp_fu_563_p2 = {{tmp_1_fu_473_p4}, {8'd0}};

assign grp_fu_571_p0 = sext_ln1245_6_cast_reg_586;

assign grp_fu_571_p2 = {{tmp_2_fu_490_p4}, {8'd0}};

assign icmp_ln433_fu_270_p2 = ((ap_sig_allocacmp_j_1 == 4'd8) ? 1'b1 : 1'b0);

assign j_1_cast_fu_282_p1 = ap_sig_allocacmp_j_1;

assign sext_ln1169_1_fu_349_p1 = xor_ln1169_fu_291_p2;

assign sext_ln1169_fu_311_p1 = xor_ln1169_fu_291_p2;

assign sext_ln1245_1_cast_fu_250_p1 = $signed(sext_ln1245_1);

assign sext_ln1245_2_cast_fu_246_p1 = $signed(sext_ln1245_2);

assign sext_ln1245_3_cast_fu_242_p1 = $signed(sext_ln1245_3);

assign sext_ln1245_4_cast_fu_238_p1 = $signed(sext_ln1245_4);

assign sext_ln1245_5_cast_fu_234_p1 = $signed(sext_ln1245_5);

assign sext_ln1245_6_cast_fu_230_p1 = $signed(sext_ln1245_6);

assign sext_ln1245_cast_fu_254_p1 = $signed(sext_ln1245);

assign sext_ln717_cast_fu_258_p1 = $signed(sext_ln717);

assign tmp_1_fu_473_p1 = grp_fu_555_p3;

assign tmp_1_fu_473_p4 = {{tmp_1_fu_473_p1[23:8]}};

assign tmp_2_fu_490_p1 = grp_fu_563_p3;

assign tmp_2_fu_490_p4 = {{tmp_2_fu_490_p1[23:8]}};

assign tmp_3_fu_302_p3 = {{60'd1}, {ap_sig_allocacmp_j_1}};

assign tmp_4_fu_320_p3 = {{60'd2}, {ap_sig_allocacmp_j_1}};

assign tmp_5_fu_340_p3 = {{60'd3}, {ap_sig_allocacmp_j_1}};

assign tmp_6_fu_373_p4 = {{grp_fu_517_p2[23:8]}};

assign tmp_7_fu_393_p1 = grp_fu_523_p3;

assign tmp_7_fu_393_p4 = {{tmp_7_fu_393_p1[23:8]}};

assign tmp_8_fu_413_p1 = grp_fu_531_p3;

assign tmp_8_fu_413_p4 = {{tmp_8_fu_413_p1[23:8]}};

assign tmp_9_fu_433_p1 = grp_fu_539_p3;

assign tmp_9_fu_433_p4 = {{tmp_9_fu_433_p1[23:8]}};

assign tmp_s_fu_453_p1 = grp_fu_547_p3;

assign tmp_s_fu_453_p4 = {{tmp_s_fu_453_p1[23:8]}};

assign trunc_ln717_7_fu_507_p1 = grp_fu_571_p3;

assign xor_ln1169_fu_291_p2 = (ap_sig_allocacmp_j_1 ^ 4'd8);

assign y_hat_V_address0 = j_1_cast_reg_630_pp0_iter10_reg;

assign y_hat_V_d0 = {{trunc_ln717_7_fu_507_p1[23:8]}};

assign zext_ln1169_1_fu_297_p1 = $unsigned(xor_ln1169_fu_291_p2);

assign zext_ln1169_2_fu_315_p1 = $unsigned(sext_ln1169_fu_311_p1);

assign zext_ln1169_3_fu_335_p1 = add_ln1169_fu_329_p2;

assign zext_ln1169_4_fu_353_p1 = $unsigned(sext_ln1169_1_fu_349_p1);

assign zext_ln1169_fu_287_p1 = ap_sig_allocacmp_j_1;

always @ (posedge ap_clk) begin
    j_1_cast_reg_630[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_630_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_630_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_630_pp0_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_630_pp0_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_630_pp0_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_630_pp0_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_630_pp0_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_630_pp0_iter8_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_630_pp0_iter9_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_1_cast_reg_630_pp0_iter10_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //TOP_TOP_Pipeline_VITIS_LOOP_433_1
