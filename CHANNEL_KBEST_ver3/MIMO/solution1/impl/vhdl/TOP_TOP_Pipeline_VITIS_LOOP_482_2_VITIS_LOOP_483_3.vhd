-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_TOP_Pipeline_VITIS_LOOP_482_2_VITIS_LOOP_483_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Y_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    Y_0_ce0 : OUT STD_LOGIC;
    Y_0_we0 : OUT STD_LOGIC;
    Y_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    H_rvd_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    H_rvd_ce0 : OUT STD_LOGIC;
    H_rvd_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    Y_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    Y_1_ce0 : OUT STD_LOGIC;
    Y_1_we0 : OUT STD_LOGIC;
    Y_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Y_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    Y_2_ce0 : OUT STD_LOGIC;
    Y_2_we0 : OUT STD_LOGIC;
    Y_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Y_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    Y_3_ce0 : OUT STD_LOGIC;
    Y_3_we0 : OUT STD_LOGIC;
    Y_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Y_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    Y_4_ce0 : OUT STD_LOGIC;
    Y_4_we0 : OUT STD_LOGIC;
    Y_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Y_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    Y_5_ce0 : OUT STD_LOGIC;
    Y_5_we0 : OUT STD_LOGIC;
    Y_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Y_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    Y_6_ce0 : OUT STD_LOGIC;
    Y_6_we0 : OUT STD_LOGIC;
    Y_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Y_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    Y_7_ce0 : OUT STD_LOGIC;
    Y_7_we0 : OUT STD_LOGIC;
    Y_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of TOP_TOP_Pipeline_VITIS_LOOP_482_2_VITIS_LOOP_483_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln482_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal select_ln482_fu_289_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln482_reg_676 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln484_fu_305_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln484_reg_681 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln484_1_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_cast_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_112 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln483_fu_332_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_fu_116 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln482_1_fu_297_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_1_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_120 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln482_1_fu_265_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln580_fu_636_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln483_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln482_fu_277_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_fu_309_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln484_fu_317_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln484_fu_321_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ireg_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_fu_380_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln574_fu_394_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_3_fu_398_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln578_fu_406_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_s_fu_372_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_5_fu_410_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln564_fu_368_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln501_fu_390_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_430_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln590_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln590_fu_442_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln590_fu_448_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_454_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_6_fu_416_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_fu_482_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln590_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln595_fu_498_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln595_fu_502_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_3_fu_512_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln592_fu_472_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln590cast_fu_528_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln580_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln580_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln591_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln591_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln591_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln594_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln590_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln594_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln594_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln597_fu_520_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln591_fu_550_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln594_1_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln595_fu_508_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln594_fu_588_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln590_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln612_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln590_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln612_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln613_fu_532_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln594_1_fu_602_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln612_fu_628_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component TOP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln482_fu_259_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_116 <= select_ln482_1_fu_297_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_116 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln482_fu_259_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_120 <= add_ln482_1_fu_265_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_120 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln482_fu_259_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_112 <= add_ln483_fu_332_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_112 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln482_fu_259_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln482_reg_676 <= select_ln482_fu_289_p3;
                trunc_ln484_reg_681 <= trunc_ln484_fu_305_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    F2_fu_430_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln501_fu_390_p1));
    H_rvd_address0 <= zext_ln484_1_fu_327_p1(6 - 1 downto 0);

    H_rvd_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            H_rvd_ce0 <= ap_const_logic_1;
        else 
            H_rvd_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_0_address0 <= j_cast_fu_353_p1(3 - 1 downto 0);

    Y_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Y_0_ce0 <= ap_const_logic_1;
        else 
            Y_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_0_d0 <= select_ln580_fu_636_p3;

    Y_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln484_reg_681)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln484_reg_681 = ap_const_lv3_0))) then 
            Y_0_we0 <= ap_const_logic_1;
        else 
            Y_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_1_address0 <= j_cast_fu_353_p1(3 - 1 downto 0);

    Y_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Y_1_ce0 <= ap_const_logic_1;
        else 
            Y_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_1_d0 <= select_ln580_fu_636_p3;

    Y_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln484_reg_681)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln484_reg_681 = ap_const_lv3_1))) then 
            Y_1_we0 <= ap_const_logic_1;
        else 
            Y_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_2_address0 <= j_cast_fu_353_p1(3 - 1 downto 0);

    Y_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Y_2_ce0 <= ap_const_logic_1;
        else 
            Y_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_2_d0 <= select_ln580_fu_636_p3;

    Y_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln484_reg_681)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln484_reg_681 = ap_const_lv3_2))) then 
            Y_2_we0 <= ap_const_logic_1;
        else 
            Y_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_3_address0 <= j_cast_fu_353_p1(3 - 1 downto 0);

    Y_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Y_3_ce0 <= ap_const_logic_1;
        else 
            Y_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_3_d0 <= select_ln580_fu_636_p3;

    Y_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln484_reg_681)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln484_reg_681 = ap_const_lv3_3))) then 
            Y_3_we0 <= ap_const_logic_1;
        else 
            Y_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_4_address0 <= j_cast_fu_353_p1(3 - 1 downto 0);

    Y_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Y_4_ce0 <= ap_const_logic_1;
        else 
            Y_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_4_d0 <= select_ln580_fu_636_p3;

    Y_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln484_reg_681)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln484_reg_681 = ap_const_lv3_4))) then 
            Y_4_we0 <= ap_const_logic_1;
        else 
            Y_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_5_address0 <= j_cast_fu_353_p1(3 - 1 downto 0);

    Y_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Y_5_ce0 <= ap_const_logic_1;
        else 
            Y_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_5_d0 <= select_ln580_fu_636_p3;

    Y_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln484_reg_681)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln484_reg_681 = ap_const_lv3_5))) then 
            Y_5_we0 <= ap_const_logic_1;
        else 
            Y_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_6_address0 <= j_cast_fu_353_p1(3 - 1 downto 0);

    Y_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Y_6_ce0 <= ap_const_logic_1;
        else 
            Y_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_6_d0 <= select_ln580_fu_636_p3;

    Y_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln484_reg_681)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln484_reg_681 = ap_const_lv3_6))) then 
            Y_6_we0 <= ap_const_logic_1;
        else 
            Y_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_7_address0 <= j_cast_fu_353_p1(3 - 1 downto 0);

    Y_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Y_7_ce0 <= ap_const_logic_1;
        else 
            Y_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Y_7_d0 <= select_ln580_fu_636_p3;

    Y_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, trunc_ln484_reg_681)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln484_reg_681 = ap_const_lv3_7))) then 
            Y_7_we0 <= ap_const_logic_1;
        else 
            Y_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln482_1_fu_265_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln482_fu_277_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1_load) + unsigned(ap_const_lv4_1));
    add_ln483_fu_332_p2 <= std_logic_vector(unsigned(select_ln482_fu_289_p3) + unsigned(ap_const_lv4_1));
    add_ln484_fu_321_p2 <= std_logic_vector(unsigned(tmp_cast_fu_309_p3) + unsigned(zext_ln484_fu_317_p1));
    add_ln590_fu_442_p2 <= std_logic_vector(unsigned(F2_fu_430_p2) + unsigned(ap_const_lv12_FF8));
    and_ln590_fu_570_p2 <= (xor_ln591_fu_564_p2 and icmp_ln590_fu_436_p2);
    and_ln591_fu_544_p2 <= (xor_ln580_fu_538_p2 and icmp_ln591_fu_466_p2);
    and_ln594_1_fu_596_p2 <= (icmp_ln594_fu_476_p2 and and_ln590_fu_570_p2);
    and_ln594_fu_582_p2 <= (xor_ln594_fu_576_p2 and and_ln590_fu_570_p2);
    and_ln612_fu_622_p2 <= (xor_ln590_fu_616_p2 and icmp_ln612_fu_492_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln482_fu_259_p2)
    begin
        if (((icmp_ln482_fu_259_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_1_fu_116)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_1_load <= i_1_fu_116;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_120)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_120;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_112, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_112;
        end if; 
    end process;

    ashr_ln595_fu_502_p2 <= std_logic_vector(shift_right(signed(man_V_6_fu_416_p3),to_integer(unsigned('0' & zext_ln595_fu_498_p1(31-1 downto 0)))));
    exp_tmp_fu_380_p4 <= ireg_fu_364_p1(62 downto 52);
    icmp_ln482_fu_259_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_40) else "0";
    icmp_ln483_fu_283_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_8) else "0";
    icmp_ln580_fu_424_p2 <= "1" when (trunc_ln564_fu_368_p1 = ap_const_lv63_0) else "0";
    icmp_ln590_fu_436_p2 <= "1" when (signed(F2_fu_430_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln591_fu_466_p2 <= "1" when (F2_fu_430_p2 = ap_const_lv12_8) else "0";
    icmp_ln594_fu_476_p2 <= "1" when (unsigned(sh_amt_fu_454_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln612_fu_492_p2 <= "1" when (tmp_fu_482_p4 = ap_const_lv8_0) else "0";
    ireg_fu_364_p1 <= H_rvd_q0;
    j_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln482_reg_676),64));
    man_V_5_fu_410_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln578_fu_406_p1));
    man_V_6_fu_416_p3 <= 
        man_V_5_fu_410_p2 when (p_Result_s_fu_372_p3(0) = '1') else 
        zext_ln578_fu_406_p1;
    or_ln590_fu_610_p2 <= (or_ln591_fu_558_p2 or icmp_ln590_fu_436_p2);
    or_ln591_fu_558_p2 <= (icmp_ln591_fu_466_p2 or icmp_ln580_fu_424_p2);
    p_Result_3_fu_398_p3 <= (ap_const_lv1_1 & trunc_ln574_fu_394_p1);
    p_Result_s_fu_372_p3 <= ireg_fu_364_p1(63 downto 63);
    select_ln482_1_fu_297_p3 <= 
        add_ln482_fu_277_p2 when (icmp_ln483_fu_283_p2(0) = '1') else 
        ap_sig_allocacmp_i_1_load;
    select_ln482_fu_289_p3 <= 
        ap_const_lv4_0 when (icmp_ln483_fu_283_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln580_fu_636_p3 <= 
        ap_const_lv16_0 when (icmp_ln580_fu_424_p2(0) = '1') else 
        select_ln612_fu_628_p3;
    select_ln591_fu_550_p3 <= 
        trunc_ln592_fu_472_p1 when (and_ln591_fu_544_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln594_1_fu_602_p3 <= 
        trunc_ln595_fu_508_p1 when (and_ln594_1_fu_596_p2(0) = '1') else 
        select_ln594_fu_588_p3;
    select_ln594_fu_588_p3 <= 
        select_ln597_fu_520_p3 when (and_ln594_fu_582_p2(0) = '1') else 
        select_ln591_fu_550_p3;
    select_ln597_fu_520_p3 <= 
        ap_const_lv16_FFFF when (tmp_3_fu_512_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln612_fu_628_p3 <= 
        shl_ln613_fu_532_p2 when (and_ln612_fu_622_p2(0) = '1') else 
        select_ln594_1_fu_602_p3;
        sext_ln590_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_454_p3),32));

    sext_ln590cast_fu_528_p1 <= sext_ln590_fu_462_p1(16 - 1 downto 0);
    sh_amt_fu_454_p3 <= 
        add_ln590_fu_442_p2 when (icmp_ln590_fu_436_p2(0) = '1') else 
        sub_ln590_fu_448_p2;
    shl_ln613_fu_532_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln592_fu_472_p1),to_integer(unsigned('0' & sext_ln590cast_fu_528_p1(16-1 downto 0)))));
    sub_ln590_fu_448_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(F2_fu_430_p2));
    tmp_3_fu_512_p3 <= ireg_fu_364_p1(63 downto 63);
    tmp_cast_fu_309_p3 <= (trunc_ln484_fu_305_p1 & ap_const_lv3_0);
    tmp_fu_482_p4 <= sh_amt_fu_454_p3(11 downto 4);
    trunc_ln484_fu_305_p1 <= select_ln482_1_fu_297_p3(3 - 1 downto 0);
    trunc_ln564_fu_368_p1 <= ireg_fu_364_p1(63 - 1 downto 0);
    trunc_ln574_fu_394_p1 <= ireg_fu_364_p1(52 - 1 downto 0);
    trunc_ln592_fu_472_p1 <= man_V_6_fu_416_p3(16 - 1 downto 0);
    trunc_ln595_fu_508_p1 <= ashr_ln595_fu_502_p2(16 - 1 downto 0);
    xor_ln580_fu_538_p2 <= (icmp_ln580_fu_424_p2 xor ap_const_lv1_1);
    xor_ln590_fu_616_p2 <= (or_ln590_fu_610_p2 xor ap_const_lv1_1);
    xor_ln591_fu_564_p2 <= (or_ln591_fu_558_p2 xor ap_const_lv1_1);
    xor_ln594_fu_576_p2 <= (icmp_ln594_fu_476_p2 xor ap_const_lv1_1);
    zext_ln484_1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln484_fu_321_p2),64));
    zext_ln484_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln482_fu_289_p3),6));
    zext_ln501_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_fu_380_p4),12));
    zext_ln578_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_3_fu_398_p3),54));
    zext_ln595_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln590_fu_462_p1),54));
end behav;
