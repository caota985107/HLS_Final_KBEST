-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_QRD_Pipeline_VITIS_LOOP_316_9_VITIS_LOOP_317_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Q_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Q_ce0 : OUT STD_LOGIC;
    Q_we0 : OUT STD_LOGIC;
    Q_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i10571_lcssa514 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i1011289_lcssa658 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i965321_lcssa674 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i919353_lcssa690 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i873385_lcssa706 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i827417_lcssa722 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i781449_lcssa738 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i735481_lcssa754 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i10575_lcssa516 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i1011293_lcssa660 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i965325_lcssa676 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i919357_lcssa692 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i873389_lcssa708 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i827421_lcssa724 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i781453_lcssa740 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i735485_lcssa756 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i10579_lcssa518 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i1011297_lcssa662 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i965329_lcssa678 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i919361_lcssa694 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i873393_lcssa710 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i827425_lcssa726 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i781457_lcssa742 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i735489_lcssa758 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i105713_lcssa520 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i1011301_lcssa664 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i965333_lcssa680 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i919365_lcssa696 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i873397_lcssa712 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i827429_lcssa728 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i781461_lcssa744 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i735493_lcssa760 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i105717_lcssa522 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i1011305_lcssa666 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i965337_lcssa682 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i919369_lcssa698 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i873401_lcssa714 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i827433_lcssa730 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i781465_lcssa746 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i735497_lcssa762 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i105721_lcssa524 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i1011309_lcssa668 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i965341_lcssa684 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i919373_lcssa700 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i873405_lcssa716 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i827437_lcssa732 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i781469_lcssa748 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i735501_lcssa764 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i105725_lcssa526 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i1011313_lcssa670 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i965345_lcssa686 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i919377_lcssa702 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i873409_lcssa718 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i827441_lcssa734 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i781473_lcssa750 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i735505_lcssa766 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i105729_lcssa528 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i1011317_lcssa672 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i965349_lcssa688 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i919381_lcssa704 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i873413_lcssa720 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i827445_lcssa736 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i781477_lcssa752 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i735509_lcssa768 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_0_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_1_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_2_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_3_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_4_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_5_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_6_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_7_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_0_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_1_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_2_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_3_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_4_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_5_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_6_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_7_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_0_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_1_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_2_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_3_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_4_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_5_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_6_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_7_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_0_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_1_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_2_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_3_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_4_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_5_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_6_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_7_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_0_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_1_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_2_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_3_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_4_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_5_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_6_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_7_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_0_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_1_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_2_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_3_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_4_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_5_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_6_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_7_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_0_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_1_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_2_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_3_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_4_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_5_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_6_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_7_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_0_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_1_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_2_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_3_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_4_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_5_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_6_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_7_load_7 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of TOP_QRD_Pipeline_VITIS_LOOP_316_9_VITIS_LOOP_317_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln316_fu_1121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln316_fu_1151_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln316_reg_2286 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln316_reg_2286_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln316_reg_2286_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln316_reg_2286_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln316_reg_2286_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln316_reg_2286_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln316_reg_2286_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln316_1_fu_1159_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln316_1_reg_2298 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln316_1_reg_2298_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln316_1_reg_2298_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln316_1_reg_2298_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln316_1_reg_2298_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln316_1_reg_2298_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln316_1_reg_2298_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_286_fu_1167_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_286_reg_2309 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_286_reg_2309_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_286_reg_2309_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_286_reg_2309_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_286_reg_2309_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_286_reg_2309_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_286_reg_2309_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_287_fu_1526_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_287_reg_2404 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_287_reg_2404_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_287_reg_2404_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast_fu_1617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_fu_310 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln317_fu_1223_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_314 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten7_fu_318 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln316_1_fu_1127_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten7_load : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln317_fu_1145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln316_fu_1139_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_25_fu_1193_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_1171_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_98_1_fu_1257_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_1244_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_98_2_fu_1291_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_1278_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1631_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_1325_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_98_3_fu_1342_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_1312_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_fu_1376_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1638_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_39_fu_1376_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_98_4_fu_1393_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_1363_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_fu_1427_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1647_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_40_fu_1427_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_98_5_fu_1444_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_1414_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_41_fu_1478_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1656_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_41_fu_1478_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_98_6_fu_1495_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_1465_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_61_cast_fu_1516_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln316_cast_fu_1523_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_fu_1545_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1665_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_42_fu_1545_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_98_7_fu_1562_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_1532_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_43_fu_1583_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1674_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_43_fu_1583_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_44_fu_1600_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1683_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_44_fu_1600_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln717_s_fu_1621_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1692_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1638_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1647_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1656_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1665_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1674_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1683_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1692_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_mux_84_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component TOP_mul_mul_16s_16s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component TOP_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component TOP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_84_16_1_1_U588 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i10571_lcssa514,
        din1 => conv_i_i_i1011289_lcssa658,
        din2 => conv_i_i_i965321_lcssa674,
        din3 => conv_i_i_i919353_lcssa690,
        din4 => conv_i_i_i873385_lcssa706,
        din5 => conv_i_i_i827417_lcssa722,
        din6 => conv_i_i_i781449_lcssa738,
        din7 => conv_i_i_i735481_lcssa754,
        din8 => select_ln316_fu_1151_p3,
        dout => tmp_17_fu_1171_p10);

    mux_84_16_1_1_U589 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_0_load,
        din1 => Y_1_load,
        din2 => Y_2_load,
        din3 => Y_3_load,
        din4 => Y_4_load,
        din5 => Y_5_load,
        din6 => Y_6_load,
        din7 => Y_7_load,
        din8 => select_ln316_1_fu_1159_p3,
        dout => tmp_25_fu_1193_p10);

    mux_84_16_1_1_U590 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i10575_lcssa516,
        din1 => conv_i_i_i1011293_lcssa660,
        din2 => conv_i_i_i965325_lcssa676,
        din3 => conv_i_i_i919357_lcssa692,
        din4 => conv_i_i_i873389_lcssa708,
        din5 => conv_i_i_i827421_lcssa724,
        din6 => conv_i_i_i781453_lcssa740,
        din7 => conv_i_i_i735485_lcssa756,
        din8 => select_ln316_reg_2286,
        dout => tmp_18_fu_1244_p10);

    mux_84_16_1_1_U591 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_0_load_1,
        din1 => Y_1_load_1,
        din2 => Y_2_load_1,
        din3 => Y_3_load_1,
        din4 => Y_4_load_1,
        din5 => Y_5_load_1,
        din6 => Y_6_load_1,
        din7 => Y_7_load_1,
        din8 => select_ln316_1_reg_2298,
        dout => tmp_98_1_fu_1257_p10);

    mux_84_16_1_1_U592 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i10579_lcssa518,
        din1 => conv_i_i_i1011297_lcssa662,
        din2 => conv_i_i_i965329_lcssa678,
        din3 => conv_i_i_i919361_lcssa694,
        din4 => conv_i_i_i873393_lcssa710,
        din5 => conv_i_i_i827425_lcssa726,
        din6 => conv_i_i_i781457_lcssa742,
        din7 => conv_i_i_i735489_lcssa758,
        din8 => select_ln316_reg_2286_pp0_iter1_reg,
        dout => tmp_19_fu_1278_p10);

    mux_84_16_1_1_U593 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_0_load_2,
        din1 => Y_1_load_2,
        din2 => Y_2_load_2,
        din3 => Y_3_load_2,
        din4 => Y_4_load_2,
        din5 => Y_5_load_2,
        din6 => Y_6_load_2,
        din7 => Y_7_load_2,
        din8 => select_ln316_1_reg_2298_pp0_iter1_reg,
        dout => tmp_98_2_fu_1291_p10);

    mux_84_16_1_1_U594 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i105713_lcssa520,
        din1 => conv_i_i_i1011301_lcssa664,
        din2 => conv_i_i_i965333_lcssa680,
        din3 => conv_i_i_i919365_lcssa696,
        din4 => conv_i_i_i873397_lcssa712,
        din5 => conv_i_i_i827429_lcssa728,
        din6 => conv_i_i_i781461_lcssa744,
        din7 => conv_i_i_i735493_lcssa760,
        din8 => select_ln316_reg_2286_pp0_iter2_reg,
        dout => tmp_20_fu_1312_p10);

    mux_84_16_1_1_U595 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_0_load_3,
        din1 => Y_1_load_3,
        din2 => Y_2_load_3,
        din3 => Y_3_load_3,
        din4 => Y_4_load_3,
        din5 => Y_5_load_3,
        din6 => Y_6_load_3,
        din7 => Y_7_load_3,
        din8 => select_ln316_1_reg_2298_pp0_iter2_reg,
        dout => tmp_98_3_fu_1342_p10);

    mux_84_16_1_1_U596 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i105717_lcssa522,
        din1 => conv_i_i_i1011305_lcssa666,
        din2 => conv_i_i_i965337_lcssa682,
        din3 => conv_i_i_i919369_lcssa698,
        din4 => conv_i_i_i873401_lcssa714,
        din5 => conv_i_i_i827433_lcssa730,
        din6 => conv_i_i_i781465_lcssa746,
        din7 => conv_i_i_i735497_lcssa762,
        din8 => select_ln316_reg_2286_pp0_iter3_reg,
        dout => tmp_21_fu_1363_p10);

    mux_84_16_1_1_U597 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_0_load_4,
        din1 => Y_1_load_4,
        din2 => Y_2_load_4,
        din3 => Y_3_load_4,
        din4 => Y_4_load_4,
        din5 => Y_5_load_4,
        din6 => Y_6_load_4,
        din7 => Y_7_load_4,
        din8 => select_ln316_1_reg_2298_pp0_iter3_reg,
        dout => tmp_98_4_fu_1393_p10);

    mux_84_16_1_1_U598 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i105721_lcssa524,
        din1 => conv_i_i_i1011309_lcssa668,
        din2 => conv_i_i_i965341_lcssa684,
        din3 => conv_i_i_i919373_lcssa700,
        din4 => conv_i_i_i873405_lcssa716,
        din5 => conv_i_i_i827437_lcssa732,
        din6 => conv_i_i_i781469_lcssa748,
        din7 => conv_i_i_i735501_lcssa764,
        din8 => select_ln316_reg_2286_pp0_iter4_reg,
        dout => tmp_22_fu_1414_p10);

    mux_84_16_1_1_U599 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_0_load_5,
        din1 => Y_1_load_5,
        din2 => Y_2_load_5,
        din3 => Y_3_load_5,
        din4 => Y_4_load_5,
        din5 => Y_5_load_5,
        din6 => Y_6_load_5,
        din7 => Y_7_load_5,
        din8 => select_ln316_1_reg_2298_pp0_iter4_reg,
        dout => tmp_98_5_fu_1444_p10);

    mux_84_16_1_1_U600 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i105725_lcssa526,
        din1 => conv_i_i_i1011313_lcssa670,
        din2 => conv_i_i_i965345_lcssa686,
        din3 => conv_i_i_i919377_lcssa702,
        din4 => conv_i_i_i873409_lcssa718,
        din5 => conv_i_i_i827441_lcssa734,
        din6 => conv_i_i_i781473_lcssa750,
        din7 => conv_i_i_i735505_lcssa766,
        din8 => select_ln316_reg_2286_pp0_iter5_reg,
        dout => tmp_23_fu_1465_p10);

    mux_84_16_1_1_U601 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_0_load_6,
        din1 => Y_1_load_6,
        din2 => Y_2_load_6,
        din3 => Y_3_load_6,
        din4 => Y_4_load_6,
        din5 => Y_5_load_6,
        din6 => Y_6_load_6,
        din7 => Y_7_load_6,
        din8 => select_ln316_1_reg_2298_pp0_iter5_reg,
        dout => tmp_98_6_fu_1495_p10);

    mux_84_16_1_1_U602 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i105729_lcssa528,
        din1 => conv_i_i_i1011317_lcssa672,
        din2 => conv_i_i_i965349_lcssa688,
        din3 => conv_i_i_i919381_lcssa704,
        din4 => conv_i_i_i873413_lcssa720,
        din5 => conv_i_i_i827445_lcssa736,
        din6 => conv_i_i_i781477_lcssa752,
        din7 => conv_i_i_i735509_lcssa768,
        din8 => select_ln316_reg_2286_pp0_iter6_reg,
        dout => tmp_24_fu_1532_p10);

    mux_84_16_1_1_U603 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_0_load_7,
        din1 => Y_1_load_7,
        din2 => Y_2_load_7,
        din3 => Y_3_load_7,
        din4 => Y_4_load_7,
        din5 => Y_5_load_7,
        din6 => Y_6_load_7,
        din7 => Y_7_load_7,
        din8 => select_ln316_1_reg_2298_pp0_iter6_reg,
        dout => tmp_98_7_fu_1562_p10);

    mul_mul_16s_16s_24_4_1_U604 : component TOP_mul_mul_16s_16s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_17_fu_1171_p10,
        din1 => tmp_25_fu_1193_p10,
        ce => ap_const_logic_1,
        dout => grp_fu_1631_p2);

    mac_muladd_16s_16s_24ns_24_4_1_U605 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_18_fu_1244_p10,
        din1 => tmp_98_1_fu_1257_p10,
        din2 => grp_fu_1638_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1638_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U606 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_fu_1278_p10,
        din1 => tmp_98_2_fu_1291_p10,
        din2 => grp_fu_1647_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1647_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U607 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_20_fu_1312_p10,
        din1 => tmp_98_3_fu_1342_p10,
        din2 => grp_fu_1656_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1656_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U608 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_21_fu_1363_p10,
        din1 => tmp_98_4_fu_1393_p10,
        din2 => grp_fu_1665_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1665_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U609 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_22_fu_1414_p10,
        din1 => tmp_98_5_fu_1444_p10,
        din2 => grp_fu_1674_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1674_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U610 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_23_fu_1465_p10,
        din1 => tmp_98_6_fu_1495_p10,
        din2 => grp_fu_1683_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1683_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U611 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_24_fu_1532_p10,
        din1 => tmp_98_7_fu_1562_p10,
        din2 => grp_fu_1692_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1692_p3);

    flow_control_loop_pipe_sequential_init_U : component TOP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln316_fu_1121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_314 <= select_ln316_1_fu_1159_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_314 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten7_fu_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln316_fu_1121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten7_fu_318 <= add_ln316_1_fu_1127_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten7_fu_318 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln316_fu_1121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_310 <= add_ln317_fu_1223_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_310 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_286_reg_2309_pp0_iter1_reg <= empty_286_reg_2309;
                select_ln316_1_reg_2298_pp0_iter1_reg <= select_ln316_1_reg_2298;
                select_ln316_reg_2286_pp0_iter1_reg <= select_ln316_reg_2286;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_286_reg_2309_pp0_iter2_reg <= empty_286_reg_2309_pp0_iter1_reg;
                empty_286_reg_2309_pp0_iter3_reg <= empty_286_reg_2309_pp0_iter2_reg;
                empty_286_reg_2309_pp0_iter4_reg <= empty_286_reg_2309_pp0_iter3_reg;
                empty_286_reg_2309_pp0_iter5_reg <= empty_286_reg_2309_pp0_iter4_reg;
                empty_286_reg_2309_pp0_iter6_reg <= empty_286_reg_2309_pp0_iter5_reg;
                empty_287_reg_2404 <= empty_287_fu_1526_p2;
                empty_287_reg_2404_pp0_iter8_reg <= empty_287_reg_2404;
                empty_287_reg_2404_pp0_iter9_reg <= empty_287_reg_2404_pp0_iter8_reg;
                select_ln316_1_reg_2298_pp0_iter2_reg <= select_ln316_1_reg_2298_pp0_iter1_reg;
                select_ln316_1_reg_2298_pp0_iter3_reg <= select_ln316_1_reg_2298_pp0_iter2_reg;
                select_ln316_1_reg_2298_pp0_iter4_reg <= select_ln316_1_reg_2298_pp0_iter3_reg;
                select_ln316_1_reg_2298_pp0_iter5_reg <= select_ln316_1_reg_2298_pp0_iter4_reg;
                select_ln316_1_reg_2298_pp0_iter6_reg <= select_ln316_1_reg_2298_pp0_iter5_reg;
                select_ln316_reg_2286_pp0_iter2_reg <= select_ln316_reg_2286_pp0_iter1_reg;
                select_ln316_reg_2286_pp0_iter3_reg <= select_ln316_reg_2286_pp0_iter2_reg;
                select_ln316_reg_2286_pp0_iter4_reg <= select_ln316_reg_2286_pp0_iter3_reg;
                select_ln316_reg_2286_pp0_iter5_reg <= select_ln316_reg_2286_pp0_iter4_reg;
                select_ln316_reg_2286_pp0_iter6_reg <= select_ln316_reg_2286_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln316_fu_1121_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_286_reg_2309 <= empty_286_fu_1167_p1;
                select_ln316_1_reg_2298 <= select_ln316_1_fu_1159_p3;
                select_ln316_reg_2286 <= select_ln316_fu_1151_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Q_address0 <= p_cast_fu_1617_p1(6 - 1 downto 0);

    Q_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            Q_ce0 <= ap_const_logic_1;
        else 
            Q_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Q_d0 <= trunc_ln717_s_fu_1621_p1(23 downto 8);

    Q_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            Q_we0 <= ap_const_logic_1;
        else 
            Q_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln316_1_fu_1127_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten7_load) + unsigned(ap_const_lv7_1));
    add_ln316_fu_1139_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_1));
    add_ln317_fu_1223_p2 <= std_logic_vector(unsigned(select_ln316_fu_1151_p3) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln316_fu_1121_p2)
    begin
        if (((icmp_ln316_fu_1121_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_314)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_314;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten7_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten7_fu_318)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten7_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten7_load <= indvar_flatten7_fu_318;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_310, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_310;
        end if; 
    end process;

    empty_286_fu_1167_p1 <= select_ln316_1_fu_1159_p3(3 - 1 downto 0);
    empty_287_fu_1526_p2 <= std_logic_vector(unsigned(tmp_61_cast_fu_1516_p3) + unsigned(select_ln316_cast_fu_1523_p1));
    grp_fu_1638_p2 <= (tmp_s_fu_1325_p4 & ap_const_lv8_0);
    grp_fu_1647_p2 <= (tmp_39_fu_1376_p4 & ap_const_lv8_0);
    grp_fu_1656_p2 <= (tmp_40_fu_1427_p4 & ap_const_lv8_0);
    grp_fu_1665_p2 <= (tmp_41_fu_1478_p4 & ap_const_lv8_0);
    grp_fu_1674_p2 <= (tmp_42_fu_1545_p4 & ap_const_lv8_0);
    grp_fu_1683_p2 <= (tmp_43_fu_1583_p4 & ap_const_lv8_0);
    grp_fu_1692_p2 <= (tmp_44_fu_1600_p4 & ap_const_lv8_0);
    icmp_ln316_fu_1121_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten7_load = ap_const_lv7_40) else "0";
    icmp_ln317_fu_1145_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_8) else "0";
    p_cast_fu_1617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_287_reg_2404_pp0_iter9_reg),64));
    select_ln316_1_fu_1159_p3 <= 
        add_ln316_fu_1139_p2 when (icmp_ln317_fu_1145_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln316_cast_fu_1523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln316_reg_2286_pp0_iter6_reg),6));
    select_ln316_fu_1151_p3 <= 
        ap_const_lv4_0 when (icmp_ln317_fu_1145_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp_39_fu_1376_p1 <= grp_fu_1638_p3;
    tmp_39_fu_1376_p4 <= tmp_39_fu_1376_p1(23 downto 8);
    tmp_40_fu_1427_p1 <= grp_fu_1647_p3;
    tmp_40_fu_1427_p4 <= tmp_40_fu_1427_p1(23 downto 8);
    tmp_41_fu_1478_p1 <= grp_fu_1656_p3;
    tmp_41_fu_1478_p4 <= tmp_41_fu_1478_p1(23 downto 8);
    tmp_42_fu_1545_p1 <= grp_fu_1665_p3;
    tmp_42_fu_1545_p4 <= tmp_42_fu_1545_p1(23 downto 8);
    tmp_43_fu_1583_p1 <= grp_fu_1674_p3;
    tmp_43_fu_1583_p4 <= tmp_43_fu_1583_p1(23 downto 8);
    tmp_44_fu_1600_p1 <= grp_fu_1683_p3;
    tmp_44_fu_1600_p4 <= tmp_44_fu_1600_p1(23 downto 8);
    tmp_61_cast_fu_1516_p3 <= (empty_286_reg_2309_pp0_iter6_reg & ap_const_lv3_0);
    tmp_s_fu_1325_p4 <= grp_fu_1631_p2(23 downto 8);
    trunc_ln717_s_fu_1621_p1 <= grp_fu_1692_p3;
end behav;
