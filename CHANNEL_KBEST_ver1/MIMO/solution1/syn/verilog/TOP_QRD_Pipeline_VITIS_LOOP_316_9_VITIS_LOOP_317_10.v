// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_QRD_Pipeline_VITIS_LOOP_316_9_VITIS_LOOP_317_10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Q_address0,
        Q_ce0,
        Q_we0,
        Q_d0,
        conv_i_i_i10571_lcssa514,
        conv_i_i_i1011289_lcssa658,
        conv_i_i_i965321_lcssa674,
        conv_i_i_i919353_lcssa690,
        conv_i_i_i873385_lcssa706,
        conv_i_i_i827417_lcssa722,
        conv_i_i_i781449_lcssa738,
        conv_i_i_i735481_lcssa754,
        conv_i_i_i10575_lcssa516,
        conv_i_i_i1011293_lcssa660,
        conv_i_i_i965325_lcssa676,
        conv_i_i_i919357_lcssa692,
        conv_i_i_i873389_lcssa708,
        conv_i_i_i827421_lcssa724,
        conv_i_i_i781453_lcssa740,
        conv_i_i_i735485_lcssa756,
        conv_i_i_i10579_lcssa518,
        conv_i_i_i1011297_lcssa662,
        conv_i_i_i965329_lcssa678,
        conv_i_i_i919361_lcssa694,
        conv_i_i_i873393_lcssa710,
        conv_i_i_i827425_lcssa726,
        conv_i_i_i781457_lcssa742,
        conv_i_i_i735489_lcssa758,
        conv_i_i_i105713_lcssa520,
        conv_i_i_i1011301_lcssa664,
        conv_i_i_i965333_lcssa680,
        conv_i_i_i919365_lcssa696,
        conv_i_i_i873397_lcssa712,
        conv_i_i_i827429_lcssa728,
        conv_i_i_i781461_lcssa744,
        conv_i_i_i735493_lcssa760,
        conv_i_i_i105717_lcssa522,
        conv_i_i_i1011305_lcssa666,
        conv_i_i_i965337_lcssa682,
        conv_i_i_i919369_lcssa698,
        conv_i_i_i873401_lcssa714,
        conv_i_i_i827433_lcssa730,
        conv_i_i_i781465_lcssa746,
        conv_i_i_i735497_lcssa762,
        conv_i_i_i105721_lcssa524,
        conv_i_i_i1011309_lcssa668,
        conv_i_i_i965341_lcssa684,
        conv_i_i_i919373_lcssa700,
        conv_i_i_i873405_lcssa716,
        conv_i_i_i827437_lcssa732,
        conv_i_i_i781469_lcssa748,
        conv_i_i_i735501_lcssa764,
        conv_i_i_i105725_lcssa526,
        conv_i_i_i1011313_lcssa670,
        conv_i_i_i965345_lcssa686,
        conv_i_i_i919377_lcssa702,
        conv_i_i_i873409_lcssa718,
        conv_i_i_i827441_lcssa734,
        conv_i_i_i781473_lcssa750,
        conv_i_i_i735505_lcssa766,
        conv_i_i_i105729_lcssa528,
        conv_i_i_i1011317_lcssa672,
        conv_i_i_i965349_lcssa688,
        conv_i_i_i919381_lcssa704,
        conv_i_i_i873413_lcssa720,
        conv_i_i_i827445_lcssa736,
        conv_i_i_i781477_lcssa752,
        conv_i_i_i735509_lcssa768,
        Y_0_load,
        Y_1_load,
        Y_2_load,
        Y_3_load,
        Y_4_load,
        Y_5_load,
        Y_6_load,
        Y_7_load,
        Y_0_load_1,
        Y_1_load_1,
        Y_2_load_1,
        Y_3_load_1,
        Y_4_load_1,
        Y_5_load_1,
        Y_6_load_1,
        Y_7_load_1,
        Y_0_load_2,
        Y_1_load_2,
        Y_2_load_2,
        Y_3_load_2,
        Y_4_load_2,
        Y_5_load_2,
        Y_6_load_2,
        Y_7_load_2,
        Y_0_load_3,
        Y_1_load_3,
        Y_2_load_3,
        Y_3_load_3,
        Y_4_load_3,
        Y_5_load_3,
        Y_6_load_3,
        Y_7_load_3,
        Y_0_load_4,
        Y_1_load_4,
        Y_2_load_4,
        Y_3_load_4,
        Y_4_load_4,
        Y_5_load_4,
        Y_6_load_4,
        Y_7_load_4,
        Y_0_load_5,
        Y_1_load_5,
        Y_2_load_5,
        Y_3_load_5,
        Y_4_load_5,
        Y_5_load_5,
        Y_6_load_5,
        Y_7_load_5,
        Y_0_load_6,
        Y_1_load_6,
        Y_2_load_6,
        Y_3_load_6,
        Y_4_load_6,
        Y_5_load_6,
        Y_6_load_6,
        Y_7_load_6,
        Y_0_load_7,
        Y_1_load_7,
        Y_2_load_7,
        Y_3_load_7,
        Y_4_load_7,
        Y_5_load_7,
        Y_6_load_7,
        Y_7_load_7
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] Q_address0;
output   Q_ce0;
output   Q_we0;
output  [15:0] Q_d0;
input  [15:0] conv_i_i_i10571_lcssa514;
input  [15:0] conv_i_i_i1011289_lcssa658;
input  [15:0] conv_i_i_i965321_lcssa674;
input  [15:0] conv_i_i_i919353_lcssa690;
input  [15:0] conv_i_i_i873385_lcssa706;
input  [15:0] conv_i_i_i827417_lcssa722;
input  [15:0] conv_i_i_i781449_lcssa738;
input  [15:0] conv_i_i_i735481_lcssa754;
input  [15:0] conv_i_i_i10575_lcssa516;
input  [15:0] conv_i_i_i1011293_lcssa660;
input  [15:0] conv_i_i_i965325_lcssa676;
input  [15:0] conv_i_i_i919357_lcssa692;
input  [15:0] conv_i_i_i873389_lcssa708;
input  [15:0] conv_i_i_i827421_lcssa724;
input  [15:0] conv_i_i_i781453_lcssa740;
input  [15:0] conv_i_i_i735485_lcssa756;
input  [15:0] conv_i_i_i10579_lcssa518;
input  [15:0] conv_i_i_i1011297_lcssa662;
input  [15:0] conv_i_i_i965329_lcssa678;
input  [15:0] conv_i_i_i919361_lcssa694;
input  [15:0] conv_i_i_i873393_lcssa710;
input  [15:0] conv_i_i_i827425_lcssa726;
input  [15:0] conv_i_i_i781457_lcssa742;
input  [15:0] conv_i_i_i735489_lcssa758;
input  [15:0] conv_i_i_i105713_lcssa520;
input  [15:0] conv_i_i_i1011301_lcssa664;
input  [15:0] conv_i_i_i965333_lcssa680;
input  [15:0] conv_i_i_i919365_lcssa696;
input  [15:0] conv_i_i_i873397_lcssa712;
input  [15:0] conv_i_i_i827429_lcssa728;
input  [15:0] conv_i_i_i781461_lcssa744;
input  [15:0] conv_i_i_i735493_lcssa760;
input  [15:0] conv_i_i_i105717_lcssa522;
input  [15:0] conv_i_i_i1011305_lcssa666;
input  [15:0] conv_i_i_i965337_lcssa682;
input  [15:0] conv_i_i_i919369_lcssa698;
input  [15:0] conv_i_i_i873401_lcssa714;
input  [15:0] conv_i_i_i827433_lcssa730;
input  [15:0] conv_i_i_i781465_lcssa746;
input  [15:0] conv_i_i_i735497_lcssa762;
input  [15:0] conv_i_i_i105721_lcssa524;
input  [15:0] conv_i_i_i1011309_lcssa668;
input  [15:0] conv_i_i_i965341_lcssa684;
input  [15:0] conv_i_i_i919373_lcssa700;
input  [15:0] conv_i_i_i873405_lcssa716;
input  [15:0] conv_i_i_i827437_lcssa732;
input  [15:0] conv_i_i_i781469_lcssa748;
input  [15:0] conv_i_i_i735501_lcssa764;
input  [15:0] conv_i_i_i105725_lcssa526;
input  [15:0] conv_i_i_i1011313_lcssa670;
input  [15:0] conv_i_i_i965345_lcssa686;
input  [15:0] conv_i_i_i919377_lcssa702;
input  [15:0] conv_i_i_i873409_lcssa718;
input  [15:0] conv_i_i_i827441_lcssa734;
input  [15:0] conv_i_i_i781473_lcssa750;
input  [15:0] conv_i_i_i735505_lcssa766;
input  [15:0] conv_i_i_i105729_lcssa528;
input  [15:0] conv_i_i_i1011317_lcssa672;
input  [15:0] conv_i_i_i965349_lcssa688;
input  [15:0] conv_i_i_i919381_lcssa704;
input  [15:0] conv_i_i_i873413_lcssa720;
input  [15:0] conv_i_i_i827445_lcssa736;
input  [15:0] conv_i_i_i781477_lcssa752;
input  [15:0] conv_i_i_i735509_lcssa768;
input  [15:0] Y_0_load;
input  [15:0] Y_1_load;
input  [15:0] Y_2_load;
input  [15:0] Y_3_load;
input  [15:0] Y_4_load;
input  [15:0] Y_5_load;
input  [15:0] Y_6_load;
input  [15:0] Y_7_load;
input  [15:0] Y_0_load_1;
input  [15:0] Y_1_load_1;
input  [15:0] Y_2_load_1;
input  [15:0] Y_3_load_1;
input  [15:0] Y_4_load_1;
input  [15:0] Y_5_load_1;
input  [15:0] Y_6_load_1;
input  [15:0] Y_7_load_1;
input  [15:0] Y_0_load_2;
input  [15:0] Y_1_load_2;
input  [15:0] Y_2_load_2;
input  [15:0] Y_3_load_2;
input  [15:0] Y_4_load_2;
input  [15:0] Y_5_load_2;
input  [15:0] Y_6_load_2;
input  [15:0] Y_7_load_2;
input  [15:0] Y_0_load_3;
input  [15:0] Y_1_load_3;
input  [15:0] Y_2_load_3;
input  [15:0] Y_3_load_3;
input  [15:0] Y_4_load_3;
input  [15:0] Y_5_load_3;
input  [15:0] Y_6_load_3;
input  [15:0] Y_7_load_3;
input  [15:0] Y_0_load_4;
input  [15:0] Y_1_load_4;
input  [15:0] Y_2_load_4;
input  [15:0] Y_3_load_4;
input  [15:0] Y_4_load_4;
input  [15:0] Y_5_load_4;
input  [15:0] Y_6_load_4;
input  [15:0] Y_7_load_4;
input  [15:0] Y_0_load_5;
input  [15:0] Y_1_load_5;
input  [15:0] Y_2_load_5;
input  [15:0] Y_3_load_5;
input  [15:0] Y_4_load_5;
input  [15:0] Y_5_load_5;
input  [15:0] Y_6_load_5;
input  [15:0] Y_7_load_5;
input  [15:0] Y_0_load_6;
input  [15:0] Y_1_load_6;
input  [15:0] Y_2_load_6;
input  [15:0] Y_3_load_6;
input  [15:0] Y_4_load_6;
input  [15:0] Y_5_load_6;
input  [15:0] Y_6_load_6;
input  [15:0] Y_7_load_6;
input  [15:0] Y_0_load_7;
input  [15:0] Y_1_load_7;
input  [15:0] Y_2_load_7;
input  [15:0] Y_3_load_7;
input  [15:0] Y_4_load_7;
input  [15:0] Y_5_load_7;
input  [15:0] Y_6_load_7;
input  [15:0] Y_7_load_7;

reg ap_idle;
reg Q_ce0;
reg Q_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln316_fu_1121_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] select_ln316_fu_1151_p3;
reg   [3:0] select_ln316_reg_2286;
reg   [3:0] select_ln316_reg_2286_pp0_iter1_reg;
reg   [3:0] select_ln316_reg_2286_pp0_iter2_reg;
reg   [3:0] select_ln316_reg_2286_pp0_iter3_reg;
reg   [3:0] select_ln316_reg_2286_pp0_iter4_reg;
reg   [3:0] select_ln316_reg_2286_pp0_iter5_reg;
reg   [3:0] select_ln316_reg_2286_pp0_iter6_reg;
wire   [3:0] select_ln316_1_fu_1159_p3;
reg   [3:0] select_ln316_1_reg_2298;
reg   [3:0] select_ln316_1_reg_2298_pp0_iter1_reg;
reg   [3:0] select_ln316_1_reg_2298_pp0_iter2_reg;
reg   [3:0] select_ln316_1_reg_2298_pp0_iter3_reg;
reg   [3:0] select_ln316_1_reg_2298_pp0_iter4_reg;
reg   [3:0] select_ln316_1_reg_2298_pp0_iter5_reg;
reg   [3:0] select_ln316_1_reg_2298_pp0_iter6_reg;
wire   [2:0] empty_286_fu_1167_p1;
reg   [2:0] empty_286_reg_2309;
reg   [2:0] empty_286_reg_2309_pp0_iter1_reg;
reg   [2:0] empty_286_reg_2309_pp0_iter2_reg;
reg   [2:0] empty_286_reg_2309_pp0_iter3_reg;
reg   [2:0] empty_286_reg_2309_pp0_iter4_reg;
reg   [2:0] empty_286_reg_2309_pp0_iter5_reg;
reg   [2:0] empty_286_reg_2309_pp0_iter6_reg;
wire   [5:0] empty_287_fu_1526_p2;
reg   [5:0] empty_287_reg_2404;
reg   [5:0] empty_287_reg_2404_pp0_iter8_reg;
reg   [5:0] empty_287_reg_2404_pp0_iter9_reg;
wire   [63:0] p_cast_fu_1617_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_310;
wire   [3:0] add_ln317_fu_1223_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_314;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [6:0] indvar_flatten7_fu_318;
wire   [6:0] add_ln316_1_fu_1127_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten7_load;
wire   [0:0] icmp_ln317_fu_1145_p2;
wire   [3:0] add_ln316_fu_1139_p2;
wire  signed [15:0] tmp_25_fu_1193_p10;
wire  signed [15:0] tmp_17_fu_1171_p10;
wire  signed [15:0] tmp_98_1_fu_1257_p10;
wire  signed [15:0] tmp_18_fu_1244_p10;
wire  signed [15:0] tmp_98_2_fu_1291_p10;
wire  signed [15:0] tmp_19_fu_1278_p10;
wire  signed [23:0] grp_fu_1631_p2;
wire   [15:0] tmp_s_fu_1325_p4;
wire  signed [15:0] tmp_98_3_fu_1342_p10;
wire  signed [15:0] tmp_20_fu_1312_p10;
wire  signed [23:0] tmp_39_fu_1376_p1;
wire   [23:0] grp_fu_1638_p3;
wire   [15:0] tmp_39_fu_1376_p4;
wire  signed [15:0] tmp_98_4_fu_1393_p10;
wire  signed [15:0] tmp_21_fu_1363_p10;
wire  signed [23:0] tmp_40_fu_1427_p1;
wire   [23:0] grp_fu_1647_p3;
wire   [15:0] tmp_40_fu_1427_p4;
wire  signed [15:0] tmp_98_5_fu_1444_p10;
wire  signed [15:0] tmp_22_fu_1414_p10;
wire  signed [23:0] tmp_41_fu_1478_p1;
wire   [23:0] grp_fu_1656_p3;
wire   [15:0] tmp_41_fu_1478_p4;
wire  signed [15:0] tmp_98_6_fu_1495_p10;
wire  signed [15:0] tmp_23_fu_1465_p10;
wire   [5:0] tmp_61_cast_fu_1516_p3;
wire   [5:0] select_ln316_cast_fu_1523_p1;
wire  signed [23:0] tmp_42_fu_1545_p1;
wire   [23:0] grp_fu_1665_p3;
wire   [15:0] tmp_42_fu_1545_p4;
wire  signed [15:0] tmp_98_7_fu_1562_p10;
wire  signed [15:0] tmp_24_fu_1532_p10;
wire  signed [23:0] tmp_43_fu_1583_p1;
wire   [23:0] grp_fu_1674_p3;
wire   [15:0] tmp_43_fu_1583_p4;
wire  signed [23:0] tmp_44_fu_1600_p1;
wire   [23:0] grp_fu_1683_p3;
wire   [15:0] tmp_44_fu_1600_p4;
wire  signed [23:0] trunc_ln717_s_fu_1621_p1;
wire   [23:0] grp_fu_1692_p3;
wire   [23:0] grp_fu_1638_p2;
wire   [23:0] grp_fu_1647_p2;
wire   [23:0] grp_fu_1656_p2;
wire   [23:0] grp_fu_1665_p2;
wire   [23:0] grp_fu_1674_p2;
wire   [23:0] grp_fu_1683_p2;
wire   [23:0] grp_fu_1692_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_done_reg = 1'b0;
end

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U588(
    .din0(conv_i_i_i10571_lcssa514),
    .din1(conv_i_i_i1011289_lcssa658),
    .din2(conv_i_i_i965321_lcssa674),
    .din3(conv_i_i_i919353_lcssa690),
    .din4(conv_i_i_i873385_lcssa706),
    .din5(conv_i_i_i827417_lcssa722),
    .din6(conv_i_i_i781449_lcssa738),
    .din7(conv_i_i_i735481_lcssa754),
    .din8(select_ln316_fu_1151_p3),
    .dout(tmp_17_fu_1171_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U589(
    .din0(Y_0_load),
    .din1(Y_1_load),
    .din2(Y_2_load),
    .din3(Y_3_load),
    .din4(Y_4_load),
    .din5(Y_5_load),
    .din6(Y_6_load),
    .din7(Y_7_load),
    .din8(select_ln316_1_fu_1159_p3),
    .dout(tmp_25_fu_1193_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U590(
    .din0(conv_i_i_i10575_lcssa516),
    .din1(conv_i_i_i1011293_lcssa660),
    .din2(conv_i_i_i965325_lcssa676),
    .din3(conv_i_i_i919357_lcssa692),
    .din4(conv_i_i_i873389_lcssa708),
    .din5(conv_i_i_i827421_lcssa724),
    .din6(conv_i_i_i781453_lcssa740),
    .din7(conv_i_i_i735485_lcssa756),
    .din8(select_ln316_reg_2286),
    .dout(tmp_18_fu_1244_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U591(
    .din0(Y_0_load_1),
    .din1(Y_1_load_1),
    .din2(Y_2_load_1),
    .din3(Y_3_load_1),
    .din4(Y_4_load_1),
    .din5(Y_5_load_1),
    .din6(Y_6_load_1),
    .din7(Y_7_load_1),
    .din8(select_ln316_1_reg_2298),
    .dout(tmp_98_1_fu_1257_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U592(
    .din0(conv_i_i_i10579_lcssa518),
    .din1(conv_i_i_i1011297_lcssa662),
    .din2(conv_i_i_i965329_lcssa678),
    .din3(conv_i_i_i919361_lcssa694),
    .din4(conv_i_i_i873393_lcssa710),
    .din5(conv_i_i_i827425_lcssa726),
    .din6(conv_i_i_i781457_lcssa742),
    .din7(conv_i_i_i735489_lcssa758),
    .din8(select_ln316_reg_2286_pp0_iter1_reg),
    .dout(tmp_19_fu_1278_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U593(
    .din0(Y_0_load_2),
    .din1(Y_1_load_2),
    .din2(Y_2_load_2),
    .din3(Y_3_load_2),
    .din4(Y_4_load_2),
    .din5(Y_5_load_2),
    .din6(Y_6_load_2),
    .din7(Y_7_load_2),
    .din8(select_ln316_1_reg_2298_pp0_iter1_reg),
    .dout(tmp_98_2_fu_1291_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U594(
    .din0(conv_i_i_i105713_lcssa520),
    .din1(conv_i_i_i1011301_lcssa664),
    .din2(conv_i_i_i965333_lcssa680),
    .din3(conv_i_i_i919365_lcssa696),
    .din4(conv_i_i_i873397_lcssa712),
    .din5(conv_i_i_i827429_lcssa728),
    .din6(conv_i_i_i781461_lcssa744),
    .din7(conv_i_i_i735493_lcssa760),
    .din8(select_ln316_reg_2286_pp0_iter2_reg),
    .dout(tmp_20_fu_1312_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U595(
    .din0(Y_0_load_3),
    .din1(Y_1_load_3),
    .din2(Y_2_load_3),
    .din3(Y_3_load_3),
    .din4(Y_4_load_3),
    .din5(Y_5_load_3),
    .din6(Y_6_load_3),
    .din7(Y_7_load_3),
    .din8(select_ln316_1_reg_2298_pp0_iter2_reg),
    .dout(tmp_98_3_fu_1342_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U596(
    .din0(conv_i_i_i105717_lcssa522),
    .din1(conv_i_i_i1011305_lcssa666),
    .din2(conv_i_i_i965337_lcssa682),
    .din3(conv_i_i_i919369_lcssa698),
    .din4(conv_i_i_i873401_lcssa714),
    .din5(conv_i_i_i827433_lcssa730),
    .din6(conv_i_i_i781465_lcssa746),
    .din7(conv_i_i_i735497_lcssa762),
    .din8(select_ln316_reg_2286_pp0_iter3_reg),
    .dout(tmp_21_fu_1363_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U597(
    .din0(Y_0_load_4),
    .din1(Y_1_load_4),
    .din2(Y_2_load_4),
    .din3(Y_3_load_4),
    .din4(Y_4_load_4),
    .din5(Y_5_load_4),
    .din6(Y_6_load_4),
    .din7(Y_7_load_4),
    .din8(select_ln316_1_reg_2298_pp0_iter3_reg),
    .dout(tmp_98_4_fu_1393_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U598(
    .din0(conv_i_i_i105721_lcssa524),
    .din1(conv_i_i_i1011309_lcssa668),
    .din2(conv_i_i_i965341_lcssa684),
    .din3(conv_i_i_i919373_lcssa700),
    .din4(conv_i_i_i873405_lcssa716),
    .din5(conv_i_i_i827437_lcssa732),
    .din6(conv_i_i_i781469_lcssa748),
    .din7(conv_i_i_i735501_lcssa764),
    .din8(select_ln316_reg_2286_pp0_iter4_reg),
    .dout(tmp_22_fu_1414_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U599(
    .din0(Y_0_load_5),
    .din1(Y_1_load_5),
    .din2(Y_2_load_5),
    .din3(Y_3_load_5),
    .din4(Y_4_load_5),
    .din5(Y_5_load_5),
    .din6(Y_6_load_5),
    .din7(Y_7_load_5),
    .din8(select_ln316_1_reg_2298_pp0_iter4_reg),
    .dout(tmp_98_5_fu_1444_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U600(
    .din0(conv_i_i_i105725_lcssa526),
    .din1(conv_i_i_i1011313_lcssa670),
    .din2(conv_i_i_i965345_lcssa686),
    .din3(conv_i_i_i919377_lcssa702),
    .din4(conv_i_i_i873409_lcssa718),
    .din5(conv_i_i_i827441_lcssa734),
    .din6(conv_i_i_i781473_lcssa750),
    .din7(conv_i_i_i735505_lcssa766),
    .din8(select_ln316_reg_2286_pp0_iter5_reg),
    .dout(tmp_23_fu_1465_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U601(
    .din0(Y_0_load_6),
    .din1(Y_1_load_6),
    .din2(Y_2_load_6),
    .din3(Y_3_load_6),
    .din4(Y_4_load_6),
    .din5(Y_5_load_6),
    .din6(Y_6_load_6),
    .din7(Y_7_load_6),
    .din8(select_ln316_1_reg_2298_pp0_iter5_reg),
    .dout(tmp_98_6_fu_1495_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U602(
    .din0(conv_i_i_i105729_lcssa528),
    .din1(conv_i_i_i1011317_lcssa672),
    .din2(conv_i_i_i965349_lcssa688),
    .din3(conv_i_i_i919381_lcssa704),
    .din4(conv_i_i_i873413_lcssa720),
    .din5(conv_i_i_i827445_lcssa736),
    .din6(conv_i_i_i781477_lcssa752),
    .din7(conv_i_i_i735509_lcssa768),
    .din8(select_ln316_reg_2286_pp0_iter6_reg),
    .dout(tmp_24_fu_1532_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U603(
    .din0(Y_0_load_7),
    .din1(Y_1_load_7),
    .din2(Y_2_load_7),
    .din3(Y_3_load_7),
    .din4(Y_4_load_7),
    .din5(Y_5_load_7),
    .din6(Y_6_load_7),
    .din7(Y_7_load_7),
    .din8(select_ln316_1_reg_2298_pp0_iter6_reg),
    .dout(tmp_98_7_fu_1562_p10)
);

TOP_mul_mul_16s_16s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
mul_mul_16s_16s_24_4_1_U604(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_17_fu_1171_p10),
    .din1(tmp_25_fu_1193_p10),
    .ce(1'b1),
    .dout(grp_fu_1631_p2)
);

TOP_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U605(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_18_fu_1244_p10),
    .din1(tmp_98_1_fu_1257_p10),
    .din2(grp_fu_1638_p2),
    .ce(1'b1),
    .dout(grp_fu_1638_p3)
);

TOP_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U606(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_19_fu_1278_p10),
    .din1(tmp_98_2_fu_1291_p10),
    .din2(grp_fu_1647_p2),
    .ce(1'b1),
    .dout(grp_fu_1647_p3)
);

TOP_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U607(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_20_fu_1312_p10),
    .din1(tmp_98_3_fu_1342_p10),
    .din2(grp_fu_1656_p2),
    .ce(1'b1),
    .dout(grp_fu_1656_p3)
);

TOP_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U608(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_21_fu_1363_p10),
    .din1(tmp_98_4_fu_1393_p10),
    .din2(grp_fu_1665_p2),
    .ce(1'b1),
    .dout(grp_fu_1665_p3)
);

TOP_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U609(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_22_fu_1414_p10),
    .din1(tmp_98_5_fu_1444_p10),
    .din2(grp_fu_1674_p2),
    .ce(1'b1),
    .dout(grp_fu_1674_p3)
);

TOP_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U610(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_23_fu_1465_p10),
    .din1(tmp_98_6_fu_1495_p10),
    .din2(grp_fu_1683_p2),
    .ce(1'b1),
    .dout(grp_fu_1683_p3)
);

TOP_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U611(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_24_fu_1532_p10),
    .din1(tmp_98_7_fu_1562_p10),
    .din2(grp_fu_1692_p2),
    .ce(1'b1),
    .dout(grp_fu_1692_p3)
);

TOP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln316_fu_1121_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_314 <= select_ln316_1_fu_1159_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_314 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln316_fu_1121_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten7_fu_318 <= add_ln316_1_fu_1127_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten7_fu_318 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln316_fu_1121_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_310 <= add_ln317_fu_1223_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_310 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_286_reg_2309_pp0_iter1_reg <= empty_286_reg_2309;
        select_ln316_1_reg_2298_pp0_iter1_reg <= select_ln316_1_reg_2298;
        select_ln316_reg_2286_pp0_iter1_reg <= select_ln316_reg_2286;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        empty_286_reg_2309_pp0_iter2_reg <= empty_286_reg_2309_pp0_iter1_reg;
        empty_286_reg_2309_pp0_iter3_reg <= empty_286_reg_2309_pp0_iter2_reg;
        empty_286_reg_2309_pp0_iter4_reg <= empty_286_reg_2309_pp0_iter3_reg;
        empty_286_reg_2309_pp0_iter5_reg <= empty_286_reg_2309_pp0_iter4_reg;
        empty_286_reg_2309_pp0_iter6_reg <= empty_286_reg_2309_pp0_iter5_reg;
        empty_287_reg_2404 <= empty_287_fu_1526_p2;
        empty_287_reg_2404_pp0_iter8_reg <= empty_287_reg_2404;
        empty_287_reg_2404_pp0_iter9_reg <= empty_287_reg_2404_pp0_iter8_reg;
        select_ln316_1_reg_2298_pp0_iter2_reg <= select_ln316_1_reg_2298_pp0_iter1_reg;
        select_ln316_1_reg_2298_pp0_iter3_reg <= select_ln316_1_reg_2298_pp0_iter2_reg;
        select_ln316_1_reg_2298_pp0_iter4_reg <= select_ln316_1_reg_2298_pp0_iter3_reg;
        select_ln316_1_reg_2298_pp0_iter5_reg <= select_ln316_1_reg_2298_pp0_iter4_reg;
        select_ln316_1_reg_2298_pp0_iter6_reg <= select_ln316_1_reg_2298_pp0_iter5_reg;
        select_ln316_reg_2286_pp0_iter2_reg <= select_ln316_reg_2286_pp0_iter1_reg;
        select_ln316_reg_2286_pp0_iter3_reg <= select_ln316_reg_2286_pp0_iter2_reg;
        select_ln316_reg_2286_pp0_iter4_reg <= select_ln316_reg_2286_pp0_iter3_reg;
        select_ln316_reg_2286_pp0_iter5_reg <= select_ln316_reg_2286_pp0_iter4_reg;
        select_ln316_reg_2286_pp0_iter6_reg <= select_ln316_reg_2286_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln316_fu_1121_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_286_reg_2309 <= empty_286_fu_1167_p1;
        select_ln316_1_reg_2298 <= select_ln316_1_fu_1159_p3;
        select_ln316_reg_2286 <= select_ln316_fu_1151_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        Q_ce0 = 1'b1;
    end else begin
        Q_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        Q_we0 = 1'b1;
    end else begin
        Q_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln316_fu_1121_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_314;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten7_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten7_load = indvar_flatten7_fu_318;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_310;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Q_address0 = p_cast_fu_1617_p1;

assign Q_d0 = {{trunc_ln717_s_fu_1621_p1[23:8]}};

assign add_ln316_1_fu_1127_p2 = (ap_sig_allocacmp_indvar_flatten7_load + 7'd1);

assign add_ln316_fu_1139_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln317_fu_1223_p2 = (select_ln316_fu_1151_p3 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_286_fu_1167_p1 = select_ln316_1_fu_1159_p3[2:0];

assign empty_287_fu_1526_p2 = (tmp_61_cast_fu_1516_p3 + select_ln316_cast_fu_1523_p1);

assign grp_fu_1638_p2 = {{tmp_s_fu_1325_p4}, {8'd0}};

assign grp_fu_1647_p2 = {{tmp_39_fu_1376_p4}, {8'd0}};

assign grp_fu_1656_p2 = {{tmp_40_fu_1427_p4}, {8'd0}};

assign grp_fu_1665_p2 = {{tmp_41_fu_1478_p4}, {8'd0}};

assign grp_fu_1674_p2 = {{tmp_42_fu_1545_p4}, {8'd0}};

assign grp_fu_1683_p2 = {{tmp_43_fu_1583_p4}, {8'd0}};

assign grp_fu_1692_p2 = {{tmp_44_fu_1600_p4}, {8'd0}};

assign icmp_ln316_fu_1121_p2 = ((ap_sig_allocacmp_indvar_flatten7_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln317_fu_1145_p2 = ((ap_sig_allocacmp_j_load == 4'd8) ? 1'b1 : 1'b0);

assign p_cast_fu_1617_p1 = empty_287_reg_2404_pp0_iter9_reg;

assign select_ln316_1_fu_1159_p3 = ((icmp_ln317_fu_1145_p2[0:0] == 1'b1) ? add_ln316_fu_1139_p2 : ap_sig_allocacmp_i_load);

assign select_ln316_cast_fu_1523_p1 = select_ln316_reg_2286_pp0_iter6_reg;

assign select_ln316_fu_1151_p3 = ((icmp_ln317_fu_1145_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign tmp_39_fu_1376_p1 = grp_fu_1638_p3;

assign tmp_39_fu_1376_p4 = {{tmp_39_fu_1376_p1[23:8]}};

assign tmp_40_fu_1427_p1 = grp_fu_1647_p3;

assign tmp_40_fu_1427_p4 = {{tmp_40_fu_1427_p1[23:8]}};

assign tmp_41_fu_1478_p1 = grp_fu_1656_p3;

assign tmp_41_fu_1478_p4 = {{tmp_41_fu_1478_p1[23:8]}};

assign tmp_42_fu_1545_p1 = grp_fu_1665_p3;

assign tmp_42_fu_1545_p4 = {{tmp_42_fu_1545_p1[23:8]}};

assign tmp_43_fu_1583_p1 = grp_fu_1674_p3;

assign tmp_43_fu_1583_p4 = {{tmp_43_fu_1583_p1[23:8]}};

assign tmp_44_fu_1600_p1 = grp_fu_1683_p3;

assign tmp_44_fu_1600_p4 = {{tmp_44_fu_1600_p1[23:8]}};

assign tmp_61_cast_fu_1516_p3 = {{empty_286_reg_2309_pp0_iter6_reg}, {3'd0}};

assign tmp_s_fu_1325_p4 = {{grp_fu_1631_p2[23:8]}};

assign trunc_ln717_s_fu_1621_p1 = grp_fu_1692_p3;

endmodule //TOP_QRD_Pipeline_VITIS_LOOP_316_9_VITIS_LOOP_317_10
