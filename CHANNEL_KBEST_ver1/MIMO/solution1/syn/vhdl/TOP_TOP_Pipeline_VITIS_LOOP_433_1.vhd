-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_TOP_Pipeline_VITIS_LOOP_433_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Q_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Q_ce0 : OUT STD_LOGIC;
    Q_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Q_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Q_ce1 : OUT STD_LOGIC;
    Q_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Q_address2 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Q_ce2 : OUT STD_LOGIC;
    Q_q2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Q_address3 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Q_ce3 : OUT STD_LOGIC;
    Q_q3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Q_address4 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Q_ce4 : OUT STD_LOGIC;
    Q_q4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Q_address5 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Q_ce5 : OUT STD_LOGIC;
    Q_q5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Q_address6 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Q_ce6 : OUT STD_LOGIC;
    Q_q6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Q_address7 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Q_ce7 : OUT STD_LOGIC;
    Q_q7 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln717 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1245_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    y_hat_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    y_hat_V_ce0 : OUT STD_LOGIC;
    y_hat_V_we0 : OUT STD_LOGIC;
    y_hat_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of TOP_TOP_Pipeline_VITIS_LOOP_433_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv60_1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv60_2 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv60_3 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln433_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal sext_ln1245_6_cast_fu_230_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_6_cast_reg_586 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln1245_5_cast_fu_234_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_5_cast_reg_591 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_4_cast_fu_238_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_4_cast_reg_596 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_3_cast_fu_242_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_3_cast_reg_601 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_2_cast_fu_246_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_2_cast_reg_606 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_1_cast_fu_250_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_1_cast_reg_611 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_cast_fu_254_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1245_cast_reg_616 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln717_cast_fu_258_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln717_cast_reg_621 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_1_cast_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_reg_630 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_reg_630_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_reg_630_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_reg_630_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_reg_630_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_reg_630_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_reg_630_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_reg_630_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_reg_630_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_reg_630_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast_reg_630_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal Q_load_1_reg_680 : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_2_reg_685 : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_2_reg_685_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_3_reg_690 : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_3_reg_690_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_3_reg_690_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_4_reg_695 : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_4_reg_695_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_4_reg_695_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_4_reg_695_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_5_reg_700 : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_5_reg_700_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_5_reg_700_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_5_reg_700_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_5_reg_700_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_6_reg_705 : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_6_reg_705_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_6_reg_705_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_6_reg_705_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_6_reg_705_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_6_reg_705_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_7_reg_710 : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_7_reg_710_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_7_reg_710_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_7_reg_710_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_7_reg_710_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_7_reg_710_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_load_7_reg_710_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1169_1_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_302_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_2_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_320_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_3_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_340_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_4_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_68 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln433_fu_276_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln1169_fu_291_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln1169_fu_311_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1169_fu_287_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1169_fu_329_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1169_1_fu_349_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_517_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_373_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_393_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_523_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_fu_393_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_413_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_531_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_413_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_433_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_539_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_fu_433_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_453_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_547_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_453_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_473_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_555_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_473_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_490_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_563_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_fu_490_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln717_7_fu_507_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_571_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_517_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_523_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_523_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_531_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_531_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_539_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_539_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_547_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_547_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_555_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_555_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_563_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_563_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_571_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_571_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_mul_mul_16s_16s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component TOP_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component TOP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_16s_16s_24_4_1_U800 : component TOP_mul_mul_16s_16s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_517_p0,
        din1 => Q_q7,
        ce => ap_const_logic_1,
        dout => grp_fu_517_p2);

    mac_muladd_16s_16s_24ns_24_4_1_U801 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_523_p0,
        din1 => Q_load_1_reg_680,
        din2 => grp_fu_523_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_523_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U802 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_531_p0,
        din1 => Q_load_2_reg_685_pp0_iter2_reg,
        din2 => grp_fu_531_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_531_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U803 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_539_p0,
        din1 => Q_load_3_reg_690_pp0_iter3_reg,
        din2 => grp_fu_539_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_539_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U804 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_547_p0,
        din1 => Q_load_4_reg_695_pp0_iter4_reg,
        din2 => grp_fu_547_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_547_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U805 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_555_p0,
        din1 => Q_load_5_reg_700_pp0_iter5_reg,
        din2 => grp_fu_555_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_555_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U806 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_563_p0,
        din1 => Q_load_6_reg_705_pp0_iter6_reg,
        din2 => grp_fu_563_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_563_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U807 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_571_p0,
        din1 => Q_load_7_reg_710_pp0_iter7_reg,
        din2 => grp_fu_571_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_571_p3);

    flow_control_loop_pipe_sequential_init_U : component TOP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln433_fu_270_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_68 <= add_ln433_fu_276_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_68 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Q_load_1_reg_680 <= Q_q6;
                Q_load_2_reg_685 <= Q_q5;
                Q_load_3_reg_690 <= Q_q4;
                Q_load_4_reg_695 <= Q_q3;
                Q_load_5_reg_700 <= Q_q2;
                Q_load_6_reg_705 <= Q_q1;
                Q_load_7_reg_710 <= Q_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                Q_load_2_reg_685_pp0_iter2_reg <= Q_load_2_reg_685;
                Q_load_3_reg_690_pp0_iter2_reg <= Q_load_3_reg_690;
                Q_load_3_reg_690_pp0_iter3_reg <= Q_load_3_reg_690_pp0_iter2_reg;
                Q_load_4_reg_695_pp0_iter2_reg <= Q_load_4_reg_695;
                Q_load_4_reg_695_pp0_iter3_reg <= Q_load_4_reg_695_pp0_iter2_reg;
                Q_load_4_reg_695_pp0_iter4_reg <= Q_load_4_reg_695_pp0_iter3_reg;
                Q_load_5_reg_700_pp0_iter2_reg <= Q_load_5_reg_700;
                Q_load_5_reg_700_pp0_iter3_reg <= Q_load_5_reg_700_pp0_iter2_reg;
                Q_load_5_reg_700_pp0_iter4_reg <= Q_load_5_reg_700_pp0_iter3_reg;
                Q_load_5_reg_700_pp0_iter5_reg <= Q_load_5_reg_700_pp0_iter4_reg;
                Q_load_6_reg_705_pp0_iter2_reg <= Q_load_6_reg_705;
                Q_load_6_reg_705_pp0_iter3_reg <= Q_load_6_reg_705_pp0_iter2_reg;
                Q_load_6_reg_705_pp0_iter4_reg <= Q_load_6_reg_705_pp0_iter3_reg;
                Q_load_6_reg_705_pp0_iter5_reg <= Q_load_6_reg_705_pp0_iter4_reg;
                Q_load_6_reg_705_pp0_iter6_reg <= Q_load_6_reg_705_pp0_iter5_reg;
                Q_load_7_reg_710_pp0_iter2_reg <= Q_load_7_reg_710;
                Q_load_7_reg_710_pp0_iter3_reg <= Q_load_7_reg_710_pp0_iter2_reg;
                Q_load_7_reg_710_pp0_iter4_reg <= Q_load_7_reg_710_pp0_iter3_reg;
                Q_load_7_reg_710_pp0_iter5_reg <= Q_load_7_reg_710_pp0_iter4_reg;
                Q_load_7_reg_710_pp0_iter6_reg <= Q_load_7_reg_710_pp0_iter5_reg;
                Q_load_7_reg_710_pp0_iter7_reg <= Q_load_7_reg_710_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                    j_1_cast_reg_630_pp0_iter10_reg(3 downto 0) <= j_1_cast_reg_630_pp0_iter9_reg(3 downto 0);
                    j_1_cast_reg_630_pp0_iter2_reg(3 downto 0) <= j_1_cast_reg_630_pp0_iter1_reg(3 downto 0);
                    j_1_cast_reg_630_pp0_iter3_reg(3 downto 0) <= j_1_cast_reg_630_pp0_iter2_reg(3 downto 0);
                    j_1_cast_reg_630_pp0_iter4_reg(3 downto 0) <= j_1_cast_reg_630_pp0_iter3_reg(3 downto 0);
                    j_1_cast_reg_630_pp0_iter5_reg(3 downto 0) <= j_1_cast_reg_630_pp0_iter4_reg(3 downto 0);
                    j_1_cast_reg_630_pp0_iter6_reg(3 downto 0) <= j_1_cast_reg_630_pp0_iter5_reg(3 downto 0);
                    j_1_cast_reg_630_pp0_iter7_reg(3 downto 0) <= j_1_cast_reg_630_pp0_iter6_reg(3 downto 0);
                    j_1_cast_reg_630_pp0_iter8_reg(3 downto 0) <= j_1_cast_reg_630_pp0_iter7_reg(3 downto 0);
                    j_1_cast_reg_630_pp0_iter9_reg(3 downto 0) <= j_1_cast_reg_630_pp0_iter8_reg(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    j_1_cast_reg_630_pp0_iter1_reg(3 downto 0) <= j_1_cast_reg_630(3 downto 0);
                sext_ln1245_1_cast_reg_611 <= sext_ln1245_1_cast_fu_250_p1;
                sext_ln1245_2_cast_reg_606 <= sext_ln1245_2_cast_fu_246_p1;
                sext_ln1245_3_cast_reg_601 <= sext_ln1245_3_cast_fu_242_p1;
                sext_ln1245_4_cast_reg_596 <= sext_ln1245_4_cast_fu_238_p1;
                sext_ln1245_5_cast_reg_591 <= sext_ln1245_5_cast_fu_234_p1;
                sext_ln1245_6_cast_reg_586 <= sext_ln1245_6_cast_fu_230_p1;
                sext_ln1245_cast_reg_616 <= sext_ln1245_cast_fu_254_p1;
                sext_ln717_cast_reg_621 <= sext_ln717_cast_fu_258_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln433_fu_270_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    j_1_cast_reg_630(3 downto 0) <= j_1_cast_fu_282_p1(3 downto 0);
            end if;
        end if;
    end process;
    j_1_cast_reg_630(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    j_1_cast_reg_630_pp0_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    j_1_cast_reg_630_pp0_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    j_1_cast_reg_630_pp0_iter3_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    j_1_cast_reg_630_pp0_iter4_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    j_1_cast_reg_630_pp0_iter5_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    j_1_cast_reg_630_pp0_iter6_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    j_1_cast_reg_630_pp0_iter7_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    j_1_cast_reg_630_pp0_iter8_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    j_1_cast_reg_630_pp0_iter9_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    j_1_cast_reg_630_pp0_iter10_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Q_address0 <= zext_ln1169_4_fu_353_p1(6 - 1 downto 0);
    Q_address1 <= tmp_5_fu_340_p3(6 - 1 downto 0);
    Q_address2 <= zext_ln1169_3_fu_335_p1(6 - 1 downto 0);
    Q_address3 <= tmp_4_fu_320_p3(6 - 1 downto 0);
    Q_address4 <= zext_ln1169_2_fu_315_p1(6 - 1 downto 0);
    Q_address5 <= tmp_3_fu_302_p3(6 - 1 downto 0);
    Q_address6 <= zext_ln1169_1_fu_297_p1(6 - 1 downto 0);
    Q_address7 <= j_1_cast_fu_282_p1(6 - 1 downto 0);

    Q_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Q_ce0 <= ap_const_logic_1;
        else 
            Q_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Q_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Q_ce1 <= ap_const_logic_1;
        else 
            Q_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Q_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Q_ce2 <= ap_const_logic_1;
        else 
            Q_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Q_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Q_ce3 <= ap_const_logic_1;
        else 
            Q_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    Q_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Q_ce4 <= ap_const_logic_1;
        else 
            Q_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    Q_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Q_ce5 <= ap_const_logic_1;
        else 
            Q_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    Q_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Q_ce6 <= ap_const_logic_1;
        else 
            Q_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    Q_ce7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Q_ce7 <= ap_const_logic_1;
        else 
            Q_ce7 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1169_fu_329_p2 <= std_logic_vector(unsigned(zext_ln1169_fu_287_p1) + unsigned(ap_const_lv6_28));
    add_ln433_fu_276_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln433_fu_270_p2)
    begin
        if (((icmp_ln433_fu_270_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_68, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_68;
        end if; 
    end process;

    grp_fu_517_p0 <= sext_ln717_cast_reg_621(16 - 1 downto 0);
    grp_fu_523_p0 <= sext_ln1245_cast_reg_616(16 - 1 downto 0);
    grp_fu_523_p2 <= (tmp_6_fu_373_p4 & ap_const_lv8_0);
    grp_fu_531_p0 <= sext_ln1245_1_cast_reg_611(16 - 1 downto 0);
    grp_fu_531_p2 <= (tmp_7_fu_393_p4 & ap_const_lv8_0);
    grp_fu_539_p0 <= sext_ln1245_2_cast_reg_606(16 - 1 downto 0);
    grp_fu_539_p2 <= (tmp_8_fu_413_p4 & ap_const_lv8_0);
    grp_fu_547_p0 <= sext_ln1245_3_cast_reg_601(16 - 1 downto 0);
    grp_fu_547_p2 <= (tmp_9_fu_433_p4 & ap_const_lv8_0);
    grp_fu_555_p0 <= sext_ln1245_4_cast_reg_596(16 - 1 downto 0);
    grp_fu_555_p2 <= (tmp_s_fu_453_p4 & ap_const_lv8_0);
    grp_fu_563_p0 <= sext_ln1245_5_cast_reg_591(16 - 1 downto 0);
    grp_fu_563_p2 <= (tmp_1_fu_473_p4 & ap_const_lv8_0);
    grp_fu_571_p0 <= sext_ln1245_6_cast_reg_586(16 - 1 downto 0);
    grp_fu_571_p2 <= (tmp_2_fu_490_p4 & ap_const_lv8_0);
    icmp_ln433_fu_270_p2 <= "1" when (ap_sig_allocacmp_j_1 = ap_const_lv4_8) else "0";
    j_1_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),64));
        sext_ln1169_1_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln1169_fu_291_p2),6));

        sext_ln1169_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln1169_fu_291_p2),5));

        sext_ln1245_1_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_1),24));

        sext_ln1245_2_cast_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_2),24));

        sext_ln1245_3_cast_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_3),24));

        sext_ln1245_4_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_4),24));

        sext_ln1245_5_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_5),24));

        sext_ln1245_6_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245_6),24));

        sext_ln1245_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1245),24));

        sext_ln717_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln717),24));

    tmp_1_fu_473_p1 <= grp_fu_555_p3;
    tmp_1_fu_473_p4 <= tmp_1_fu_473_p1(23 downto 8);
    tmp_2_fu_490_p1 <= grp_fu_563_p3;
    tmp_2_fu_490_p4 <= tmp_2_fu_490_p1(23 downto 8);
    tmp_3_fu_302_p3 <= (ap_const_lv60_1 & ap_sig_allocacmp_j_1);
    tmp_4_fu_320_p3 <= (ap_const_lv60_2 & ap_sig_allocacmp_j_1);
    tmp_5_fu_340_p3 <= (ap_const_lv60_3 & ap_sig_allocacmp_j_1);
    tmp_6_fu_373_p4 <= grp_fu_517_p2(23 downto 8);
    tmp_7_fu_393_p1 <= grp_fu_523_p3;
    tmp_7_fu_393_p4 <= tmp_7_fu_393_p1(23 downto 8);
    tmp_8_fu_413_p1 <= grp_fu_531_p3;
    tmp_8_fu_413_p4 <= tmp_8_fu_413_p1(23 downto 8);
    tmp_9_fu_433_p1 <= grp_fu_539_p3;
    tmp_9_fu_433_p4 <= tmp_9_fu_433_p1(23 downto 8);
    tmp_s_fu_453_p1 <= grp_fu_547_p3;
    tmp_s_fu_453_p4 <= tmp_s_fu_453_p1(23 downto 8);
    trunc_ln717_7_fu_507_p1 <= grp_fu_571_p3;
    xor_ln1169_fu_291_p2 <= (ap_sig_allocacmp_j_1 xor ap_const_lv4_8);
    y_hat_V_address0 <= j_1_cast_reg_630_pp0_iter10_reg(3 - 1 downto 0);

    y_hat_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            y_hat_V_ce0 <= ap_const_logic_1;
        else 
            y_hat_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_hat_V_d0 <= trunc_ln717_7_fu_507_p1(23 downto 8);

    y_hat_V_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            y_hat_V_we0 <= ap_const_logic_1;
        else 
            y_hat_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1169_1_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1169_fu_291_p2),64));
    zext_ln1169_2_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1169_fu_311_p1),64));
    zext_ln1169_3_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_fu_329_p2),64));
    zext_ln1169_4_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1169_1_fu_349_p1),64));
    zext_ln1169_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),6));
end behav;
